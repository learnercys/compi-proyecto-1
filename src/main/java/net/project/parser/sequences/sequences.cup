package net.project.parser.sequences;

import java_cup.runtime.*;
import java.util.ArrayList;
import java.util.HashMap;
import net.project.utils.GenericAttr;
import net.project.utils.GenericElement;

parser code{:
    public boolean hasUnRecoveredSyntaxError = false;
    public ArrayList<HashMap<String, String>> errors = new ArrayList<>();
    public ArrayList<GenericElement> sequences = new ArrayList<>();

    public void syntax_error(Symbol cur_token) {
        HashMap<String, String> error = new HashMap<>();
        error.put("text", (String) cur_token.value);
        // todo add token type
        error.put("number", Integer.toString(errors.size() + 1));
        errors.add( error );
    }
:}

terminal
    INIT_SCENARIOS,
    END_SCENARIOS,

    INIT_SCENARIO,
    MORE_THAN_S,

    SEMICOLON,
    NAME,
    EQUAL,
    ORDER;

terminal String
    ID;

terminal Integer
    INT;

non terminal
    sequences,
    sequences_elements,
    sequences_element;

non terminal GenericAttr
    scenario_attr;

non terminal GenericElement
    scenario_attrs;

start with sequences;

sequences::= INIT_SCENARIOS sequences_elements END_SCENARIOS
            | error;

sequences_elements::= sequences_element
                    | sequences_element sequences_elements;

sequences_element::= INIT_SCENARIO scenario_attrs:sequence MORE_THAN_S{:
    if(this.parser.sequences.size() == 0) {
        this.parser.sequences.add(sequence);
    } else {
        for(int index = 0; index < this.parser.sequences.size(); index++){
            GenericElement s = this.parser.sequences.get(index);
            if( (Integer)s.getAttr("order").getValue() > (Integer)sequence.getAttr("order").getValue()) {
              this.parser.sequences.add(index, sequence);
              break;
            } else {
                if(index == this.parser.sequences.size()){
                    this.parser.sequences.add(sequence);
                  break;
                }
            }
        }
    }
:}
| error;

scenario_attrs::= scenario_attr:attr SEMICOLON{:
                    RESULT = new GenericElement();
                    RESULT.addAttr(attr);
                :}
                | scenario_attr:attr SEMICOLON scenario_attrs:attrs{:
                    RESULT = new GenericElement();
                    RESULT.addAttr(attr);
                    RESULT.addAll(attrs);
                :}
                | error;

scenario_attr::= NAME EQUAL ID:value{:
                    RESULT = new GenericAttr<String>();
                    RESULT.setType("name");
                    RESULT.setValue(value);
                :}
                | ORDER EQUAL INT:value{:
                    RESULT = new GenericAttr<Integer>();
                    RESULT.setType("order");
                    RESULT.setValue(value);
                :};

