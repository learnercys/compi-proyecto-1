package net.project.parser.structures;

import java_cup.runtime.*;
import java.util.ArrayList;
import java.util.HashMap;
import net.project.utils.GenericAttr;
import net.project.utils.GenericElement;

parser code{:
    public boolean hasUnRecoveredSyntaxError = false;
    public ArrayList<HashMap<String, String>> errors = new ArrayList<>();
    public ArrayList<GenericElement> bgs = new ArrayList<>();
    public ArrayList<GenericElement> figures = new ArrayList<>();
    public ArrayList<GenericElement> designs = new ArrayList<>();

    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception {
        // has some un-recovered syntax error(structure error)
        this.hasUnRecoveredSyntaxError = true;
    }

    public void syntax_error(Symbol cur_token) {
        HashMap<String, String> error = new HashMap<>();
        error.put("text", (String) cur_token.value);
        // todo add token type
        error.put("number", Integer.toString(errors.size() + 1));
        errors.add( error );
    }
:}

terminal

    // tags
    INIT_CONF,
    END_CONF,
    INIT_BG,
    END_BG,
    INIT_FIGURE,
    END_FIGURE,
    INIT_DESIGN,
    END_DESIGN,

    // single chars
    O_BRACE,
    C_BRACE,
    COMMA,
    EQUAL,
    SEMICOLON,

    // single words
    NAME,
    PICTURE,
    TYPE,
    LIVE,
    DESTROY,
    DESCRIPTION;

terminal Integer
    INT;

terminal String
    // single words
    HERO,
    ENEMY,
    FINISH,
    BLOCK,
    BONUS,
    BOMB,
    WEAPON,

    // er
    ID,
    PATH,
    STRING;

non terminal
    structures,
    elements_conf,
    element_conf,
    bg,
    bg_elements,
    bg_element,

    figure,
    figure_elements,
    figure_element,
    figure_live,
    figure_destroy,
    figure_description,

    design,
    design_elements,
    design_element,
    design_type,
    design_destroy,

    generic_type;

non terminal GenericAttr
    // backgrounds
    bg_attr,

    // figures
    figure_attr,

    // design
    design_attr;

non terminal GenericElement
    // backgrounds
    bg_attrs,

    // figures
    figure_attrs,

    // design
    design_attrs;

non terminal String
    // figure
    figure_type,

    // general
    name,
    picture;

start with structures;

// <configuracion> elements </configuracion>
structures::= INIT_CONF elements_conf END_CONF
            | error {

            };

elements_conf::= element_conf
                | element_conf elements_conf;

element_conf::= bg
                | figure
                | design;

// <fondo> elements </fondo>
bg::= INIT_BG bg_elements END_BG;

bg_elements::= bg_element
                | bg_element COMMA bg_elements;

bg_element::= O_BRACE bg_attrs:bg C_BRACE{:
    // background element found.
    this.parser.bgs.add(bg);
:};

bg_attrs::= bg_attr:attr SEMICOLON{:
                RESULT = new GenericElement();
                RESULT.addAttr(attr);
            :}
            | bg_attr:attr SEMICOLON bg_attrs:attrs{:
                RESULT = new GenericElement();
                RESULT.addAttr(attr);
                RESULT.addAll(attrs);
            :};

// TODO verify if could be a type.
bg_attr::= name:n{:
                RESULT = new GenericAttr<String>();
                RESULT.setType("name");
                RESULT.setValue(n);
            :}
            | picture:p{:
                RESULT = new GenericAttr<String>();
                RESULT.setType("picture");
                RESULT.setValue(p);
            :};

// <figura> </figura>
figure::= INIT_FIGURE figure_elements END_FIGURE;

figure_elements::= figure_element
                    | figure_element COMMA figure_elements;

figure_element::= O_BRACE figure_attrs:figure C_BRACE{:
                    this.parser.figures.add(figure);
                :};

figure_attrs::= figure_attr:attr SEMICOLON{:
                    RESULT = new GenericElement();
                    RESULT.addAttr(attr);
                :}
                | figure_attr:attr SEMICOLON figure_attrs:attrs{:
                    RESULT = new GenericElement();
                    RESULT.addAttr(attr);
                    RESULT.addAll(attrs);
                :};

figure_attr::= name:n{:
                    RESULT = new GenericAttr<String>();
                    RESULT.setType("name");
                    RESULT.setValue(n);
                :}
                | picture:p{:
                    RESULT = new GenericAttr<String>();
                    RESULT.setType("picture");
                    RESULT.setValue(p);
                :}
                | figure_type:type{:
                    RESULT = new GenericAttr<String>();
                    RESULT.setType("type");
                    RESULT.setValue(type);
                :}
                // TODO  verify if live is between [0,100]
                | figure_live:live{:
                    RESULT = new GenericAttr<Integer>();
                    RESULT.setType("live");
                    RESULT.setValue(live);
                :}
                // TODO verify the value, only can have values like 10,20,30,...,90,100
                | figure_destroy:destroy{:
                    RESULT = new GenericAttr<Integer>();
                    RESULT.setType("destroy");
                    RESULT.setValue(destroy);
                :}
                | figure_description:description{:
                    RESULT = new GenericAttr<String>();
                    RESULT.setType("description");
                    RESULT.setValue(description);
                :};


figure_type::= generic_type HERO:h{:
                    RESULT = h;
                :}
                | generic_type ENEMY:e{:
                    RESULT = e;
                :};

figure_live::= LIVE EQUAL INT:i{: RESULT = i; :};

figure_destroy::= DESTROY EQUAL INT:i{: RESULT = i; :};

figure_description::= DESCRIPTION EQUAL STRING:s{: RESULT = s; :};

// <diseño> elements </diseño>
design::= INIT_DESIGN design_elements END_DESIGN;

design_elements::= design_element
                    | design_element COMMA design_elements;

design_element::= O_BRACE design_attrs:design C_BRACE{:
                    this.parser.designs.add(design);
                :};

design_attrs::= design_attr:attr SEMICOLON{:
                    RESULT = new GenericElement();
                    RESULT.addAttr(attr);
                :}
                | design_attr:attr SEMICOLON design_attrs:attrs{:
                    RESULT = new GenericElement();
                    RESULT.addAttr(attr);
                    RESULT.addAll(attrs);
                :};

design_attr::= name:n{:
                    RESULT = new GenericAttr<String>();
                    RESULT.setType("name");
                    RESULT.setValue(n);
                :}
                | picture:p{:
                    RESULT = new GenericAttr<String>();
                    RESULT.setType("picture");
                    RESULT.setValue(p);
                :}
                | design_type:type{:
                    RESULT = new GenericAttr<String>();
                    RESULT.setType("type");
                    RESULT.setValue(type);
                :}
                | design_destroy:destroy{:
                    RESULT = new GenericAttr<Integer>();
                    RESULT.setType("destroy");
                    RESULT.setValue(destroy);
                :};

design_type::= generic_type FINISH:t{: RESULT = t; :}
                | generic_type BLOCK:t{: RESULT = t; :}
                | generic_type BONUS:t{: RESULT = t; :}
                | generic_type BOMB:t{: RESULT = t; :}
                | generic_type WEAPON:t{: RESULT = t; :};

design_destroy::= DESTROY EQUAL INT:i{: RESULT = i; :};

// General elements

name::= NAME EQUAL ID:id{:
    RESULT = id;
:};

picture::= PICTURE EQUAL PATH:path{:
    RESULT = path;
:};

generic_type::= TYPE EQUAL;
