
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Thu Sep 17 02:05:13 CST 2015
//----------------------------------------------------

package net.project.parser.structures;

import java_cup.runtime.*;
import java.util.ArrayList;
import java.util.HashMap;
import net.project.utils.GenericAttr;
import net.project.utils.GenericElement;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Thu Sep 17 02:05:13 CST 2015
  */
public class StructuresParse extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public StructuresParse() {super();}

  /** Constructor which sets the default scanner. */
  public StructuresParse(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public StructuresParse(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\063\000\002\002\004\000\002\002\005\000\002\003" +
    "\003\000\002\003\004\000\002\004\003\000\002\004\003" +
    "\000\002\004\003\000\002\005\005\000\002\006\003\000" +
    "\002\006\005\000\002\007\005\000\002\027\004\000\002" +
    "\027\005\000\002\024\003\000\002\024\003\000\002\010" +
    "\005\000\002\011\003\000\002\011\005\000\002\012\005" +
    "\000\002\030\004\000\002\030\005\000\002\025\003\000" +
    "\002\025\003\000\002\025\003\000\002\025\003\000\002" +
    "\025\003\000\002\025\003\000\002\032\004\000\002\032" +
    "\004\000\002\013\005\000\002\014\005\000\002\015\005" +
    "\000\002\016\005\000\002\017\003\000\002\017\005\000" +
    "\002\020\005\000\002\031\004\000\002\031\005\000\002" +
    "\026\003\000\002\026\003\000\002\026\003\000\002\026" +
    "\003\000\002\021\004\000\002\021\004\000\002\021\004" +
    "\000\002\021\004\000\002\021\004\000\002\022\005\000" +
    "\002\033\005\000\002\034\005\000\002\023\004" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\130\000\004\004\005\001\002\000\004\002\132\001" +
    "\002\000\010\006\013\010\012\012\015\001\002\000\012" +
    "\005\ufffc\006\ufffc\010\ufffc\012\ufffc\001\002\000\012\005" +
    "\ufffb\006\ufffb\010\ufffb\012\ufffb\001\002\000\012\005\ufffd" +
    "\006\ufffd\010\ufffd\012\ufffd\001\002\000\004\005\131\001" +
    "\002\000\004\014\075\001\002\000\004\014\060\001\002" +
    "\000\012\005\uffff\006\013\010\012\012\015\001\002\000" +
    "\004\014\017\001\002\000\006\013\uffe0\016\054\001\002" +
    "\000\012\021\034\022\022\023\030\025\027\001\002\000" +
    "\004\013\021\001\002\000\012\005\uffe1\006\uffe1\010\uffe1" +
    "\012\uffe1\001\002\000\004\017\052\001\002\000\004\020" +
    "\uffdb\001\002\000\004\020\050\001\002\000\004\020\uffd9" +
    "\001\002\000\004\020\uffda\001\002\000\004\017\046\001" +
    "\002\000\004\017\045\001\002\000\004\015\044\001\002" +
    "\000\014\032\037\033\042\034\043\035\040\036\041\001" +
    "\002\000\004\020\uffd8\001\002\000\004\017\035\001\002" +
    "\000\004\037\036\001\002\000\004\020\uffd1\001\002\000" +
    "\004\020\uffd7\001\002\000\004\020\uffd4\001\002\000\004" +
    "\020\uffd3\001\002\000\004\020\uffd6\001\002\000\004\020" +
    "\uffd5\001\002\000\006\013\uffde\016\uffde\001\002\000\020" +
    "\030\uffcf\031\uffcf\032\uffcf\033\uffcf\034\uffcf\035\uffcf\036" +
    "\uffcf\001\002\000\004\027\047\001\002\000\004\020\uffd2" +
    "\001\002\000\014\015\uffdd\021\034\022\022\023\030\025" +
    "\027\001\002\000\004\015\uffdc\001\002\000\004\040\053" +
    "\001\002\000\004\020\uffd0\001\002\000\004\014\017\001" +
    "\002\000\004\013\uffdf\001\002\000\004\005\ufffe\001\002" +
    "\000\004\007\073\001\002\000\006\021\034\022\022\001" +
    "\002\000\006\007\ufff9\016\062\001\002\000\004\014\060" +
    "\001\002\000\004\007\ufff8\001\002\000\004\020\ufff4\001" +
    "\002\000\004\020\ufff3\001\002\000\004\020\071\001\002" +
    "\000\004\015\070\001\002\000\006\007\ufff7\016\ufff7\001" +
    "\002\000\010\015\ufff6\021\034\022\022\001\002\000\004" +
    "\015\ufff5\001\002\000\012\005\ufffa\006\ufffa\010\ufffa\012" +
    "\ufffa\001\002\000\006\011\ufff1\016\127\001\002\000\016" +
    "\021\034\022\022\023\030\024\102\025\106\026\105\001" +
    "\002\000\004\011\077\001\002\000\012\005\ufff2\006\ufff2" +
    "\010\ufff2\012\ufff2\001\002\000\004\020\uffec\001\002\000" +
    "\004\020\125\001\002\000\004\017\123\001\002\000\004" +
    "\020\uffea\001\002\000\004\020\uffeb\001\002\000\004\017" +
    "\121\001\002\000\004\017\117\001\002\000\004\020\uffe7" +
    "\001\002\000\004\020\uffe9\001\002\000\006\030\116\031" +
    "\115\001\002\000\004\015\114\001\002\000\004\020\uffe8" +
    "\001\002\000\006\011\uffef\016\uffef\001\002\000\004\020" +
    "\uffe5\001\002\000\004\020\uffe6\001\002\000\004\027\120" +
    "\001\002\000\004\020\uffe3\001\002\000\004\041\122\001" +
    "\002\000\004\020\uffe2\001\002\000\004\027\124\001\002" +
    "\000\004\020\uffe4\001\002\000\020\015\uffee\021\034\022" +
    "\022\023\030\024\102\025\106\026\105\001\002\000\004" +
    "\015\uffed\001\002\000\004\014\075\001\002\000\004\011" +
    "\ufff0\001\002\000\004\002\000\001\002\000\004\002\001" +
    "\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\130\000\004\002\003\001\001\000\002\001\001\000" +
    "\014\003\010\004\013\005\007\010\005\016\006\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\011\075\012\073\001\001\000\006" +
    "\006\056\007\060\001\001\000\014\003\055\004\013\005" +
    "\007\010\005\016\006\001\001\000\006\017\017\020\015" +
    "\001\001\000\002\001\001\000\020\021\024\022\032\023" +
    "\031\026\023\031\030\033\022\034\025\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\020\021\024\022\032\023\031\026\023" +
    "\031\050\033\022\034\025\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\017\054\020\015" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\012\024\065\027\066\033\063\034\064\001\001" +
    "\000\002\001\001\000\006\006\062\007\060\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\024" +
    "\065\027\071\033\063\034\064\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\024\013\107\014" +
    "\112\015\106\023\110\025\100\030\111\032\102\033\077" +
    "\034\103\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\024\013\107\014\112\015\106" +
    "\023\110\025\100\030\125\032\102\033\077\034\103\001" +
    "\001\000\002\001\001\000\006\011\127\012\073\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$StructuresParse$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$StructuresParse$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$StructuresParse$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    public ArrayList<GenericElement> bgs = new ArrayList<>();
    public ArrayList<GenericElement> figures = new ArrayList<>();
    public ArrayList<GenericElement> designs = new ArrayList<>();

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$StructuresParse$actions {
  private final StructuresParse parser;

  /** Constructor */
  CUP$StructuresParse$actions(StructuresParse parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$StructuresParse$do_action(
    int                        CUP$StructuresParse$act_num,
    java_cup.runtime.lr_parser CUP$StructuresParse$parser,
    java.util.Stack            CUP$StructuresParse$stack,
    int                        CUP$StructuresParse$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$StructuresParse$result;

      /* select the action based on the action number */
      switch (CUP$StructuresParse$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // generic_type ::= TYPE EQUAL 
            {
              Object RESULT =null;

              CUP$StructuresParse$result = parser.getSymbolFactory().newSymbol("generic_type",17, ((java_cup.runtime.Symbol)CUP$StructuresParse$stack.elementAt(CUP$StructuresParse$top-1)), ((java_cup.runtime.Symbol)CUP$StructuresParse$stack.peek()), RESULT);
            }
          return CUP$StructuresParse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // picture ::= PICTURE EQUAL PATH 
            {
              String RESULT =null;
		int pathleft = ((java_cup.runtime.Symbol)CUP$StructuresParse$stack.peek()).left;
		int pathright = ((java_cup.runtime.Symbol)CUP$StructuresParse$stack.peek()).right;
		String path = (String)((java_cup.runtime.Symbol) CUP$StructuresParse$stack.peek()).value;
		
    RESULT = path;

              CUP$StructuresParse$result = parser.getSymbolFactory().newSymbol("picture",26, ((java_cup.runtime.Symbol)CUP$StructuresParse$stack.elementAt(CUP$StructuresParse$top-2)), ((java_cup.runtime.Symbol)CUP$StructuresParse$stack.peek()), RESULT);
            }
          return CUP$StructuresParse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // name ::= NAME EQUAL ID 
            {
              String RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$StructuresParse$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$StructuresParse$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$StructuresParse$stack.peek()).value;
		
    RESULT = id;

              CUP$StructuresParse$result = parser.getSymbolFactory().newSymbol("name",25, ((java_cup.runtime.Symbol)CUP$StructuresParse$stack.elementAt(CUP$StructuresParse$top-2)), ((java_cup.runtime.Symbol)CUP$StructuresParse$stack.peek()), RESULT);
            }
          return CUP$StructuresParse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // design_destroy ::= DESTROY EQUAL INT 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$StructuresParse$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$StructuresParse$stack.peek()).right;
		Integer i = (Integer)((java_cup.runtime.Symbol) CUP$StructuresParse$stack.peek()).value;
		 RESULT = i; 
              CUP$StructuresParse$result = parser.getSymbolFactory().newSymbol("design_destroy",16, ((java_cup.runtime.Symbol)CUP$StructuresParse$stack.elementAt(CUP$StructuresParse$top-2)), ((java_cup.runtime.Symbol)CUP$StructuresParse$stack.peek()), RESULT);
            }
          return CUP$StructuresParse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // design_type ::= generic_type WEAPON 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$StructuresParse$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$StructuresParse$stack.peek()).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$StructuresParse$stack.peek()).value;
		 RESULT = t; 
              CUP$StructuresParse$result = parser.getSymbolFactory().newSymbol("design_type",15, ((java_cup.runtime.Symbol)CUP$StructuresParse$stack.elementAt(CUP$StructuresParse$top-1)), ((java_cup.runtime.Symbol)CUP$StructuresParse$stack.peek()), RESULT);
            }
          return CUP$StructuresParse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // design_type ::= generic_type BOMB 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$StructuresParse$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$StructuresParse$stack.peek()).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$StructuresParse$stack.peek()).value;
		 RESULT = t; 
              CUP$StructuresParse$result = parser.getSymbolFactory().newSymbol("design_type",15, ((java_cup.runtime.Symbol)CUP$StructuresParse$stack.elementAt(CUP$StructuresParse$top-1)), ((java_cup.runtime.Symbol)CUP$StructuresParse$stack.peek()), RESULT);
            }
          return CUP$StructuresParse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // design_type ::= generic_type BONUS 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$StructuresParse$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$StructuresParse$stack.peek()).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$StructuresParse$stack.peek()).value;
		 RESULT = t; 
              CUP$StructuresParse$result = parser.getSymbolFactory().newSymbol("design_type",15, ((java_cup.runtime.Symbol)CUP$StructuresParse$stack.elementAt(CUP$StructuresParse$top-1)), ((java_cup.runtime.Symbol)CUP$StructuresParse$stack.peek()), RESULT);
            }
          return CUP$StructuresParse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // design_type ::= generic_type BLOCK 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$StructuresParse$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$StructuresParse$stack.peek()).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$StructuresParse$stack.peek()).value;
		 RESULT = t; 
              CUP$StructuresParse$result = parser.getSymbolFactory().newSymbol("design_type",15, ((java_cup.runtime.Symbol)CUP$StructuresParse$stack.elementAt(CUP$StructuresParse$top-1)), ((java_cup.runtime.Symbol)CUP$StructuresParse$stack.peek()), RESULT);
            }
          return CUP$StructuresParse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // design_type ::= generic_type FINISH 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$StructuresParse$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$StructuresParse$stack.peek()).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$StructuresParse$stack.peek()).value;
		 RESULT = t; 
              CUP$StructuresParse$result = parser.getSymbolFactory().newSymbol("design_type",15, ((java_cup.runtime.Symbol)CUP$StructuresParse$stack.elementAt(CUP$StructuresParse$top-1)), ((java_cup.runtime.Symbol)CUP$StructuresParse$stack.peek()), RESULT);
            }
          return CUP$StructuresParse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // design_attr ::= design_destroy 
            {
              GenericAttr RESULT =null;
		int destroyleft = ((java_cup.runtime.Symbol)CUP$StructuresParse$stack.peek()).left;
		int destroyright = ((java_cup.runtime.Symbol)CUP$StructuresParse$stack.peek()).right;
		Object destroy = (Object)((java_cup.runtime.Symbol) CUP$StructuresParse$stack.peek()).value;
		
                    RESULT = new GenericAttr<Integer>();
                    RESULT.setType("destroy");
                    RESULT.setValue(destroy);
                
              CUP$StructuresParse$result = parser.getSymbolFactory().newSymbol("design_attr",20, ((java_cup.runtime.Symbol)CUP$StructuresParse$stack.peek()), ((java_cup.runtime.Symbol)CUP$StructuresParse$stack.peek()), RESULT);
            }
          return CUP$StructuresParse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // design_attr ::= design_type 
            {
              GenericAttr RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$StructuresParse$stack.peek()).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$StructuresParse$stack.peek()).right;
		Object type = (Object)((java_cup.runtime.Symbol) CUP$StructuresParse$stack.peek()).value;
		
                    RESULT = new GenericAttr<String>();
                    RESULT.setType("type");
                    RESULT.setValue(type);
                
              CUP$StructuresParse$result = parser.getSymbolFactory().newSymbol("design_attr",20, ((java_cup.runtime.Symbol)CUP$StructuresParse$stack.peek()), ((java_cup.runtime.Symbol)CUP$StructuresParse$stack.peek()), RESULT);
            }
          return CUP$StructuresParse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // design_attr ::= picture 
            {
              GenericAttr RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$StructuresParse$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$StructuresParse$stack.peek()).right;
		String p = (String)((java_cup.runtime.Symbol) CUP$StructuresParse$stack.peek()).value;
		
                    RESULT = new GenericAttr<String>();
                    RESULT.setType("picture");
                    RESULT.setValue(p);
                
              CUP$StructuresParse$result = parser.getSymbolFactory().newSymbol("design_attr",20, ((java_cup.runtime.Symbol)CUP$StructuresParse$stack.peek()), ((java_cup.runtime.Symbol)CUP$StructuresParse$stack.peek()), RESULT);
            }
          return CUP$StructuresParse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // design_attr ::= name 
            {
              GenericAttr RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$StructuresParse$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$StructuresParse$stack.peek()).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$StructuresParse$stack.peek()).value;
		
                    RESULT = new GenericAttr<String>();
                    RESULT.setType("name");
                    RESULT.setValue(n);
                
              CUP$StructuresParse$result = parser.getSymbolFactory().newSymbol("design_attr",20, ((java_cup.runtime.Symbol)CUP$StructuresParse$stack.peek()), ((java_cup.runtime.Symbol)CUP$StructuresParse$stack.peek()), RESULT);
            }
          return CUP$StructuresParse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // design_attrs ::= design_attr SEMICOLON design_attrs 
            {
              GenericElement RESULT =null;
		int attrleft = ((java_cup.runtime.Symbol)CUP$StructuresParse$stack.elementAt(CUP$StructuresParse$top-2)).left;
		int attrright = ((java_cup.runtime.Symbol)CUP$StructuresParse$stack.elementAt(CUP$StructuresParse$top-2)).right;
		GenericAttr attr = (GenericAttr)((java_cup.runtime.Symbol) CUP$StructuresParse$stack.elementAt(CUP$StructuresParse$top-2)).value;
		int attrsleft = ((java_cup.runtime.Symbol)CUP$StructuresParse$stack.peek()).left;
		int attrsright = ((java_cup.runtime.Symbol)CUP$StructuresParse$stack.peek()).right;
		GenericElement attrs = (GenericElement)((java_cup.runtime.Symbol) CUP$StructuresParse$stack.peek()).value;
		
                    RESULT = new GenericElement();
                    RESULT.addAttr(attr);
                    RESULT.addAll(attrs);
                
              CUP$StructuresParse$result = parser.getSymbolFactory().newSymbol("design_attrs",23, ((java_cup.runtime.Symbol)CUP$StructuresParse$stack.elementAt(CUP$StructuresParse$top-2)), ((java_cup.runtime.Symbol)CUP$StructuresParse$stack.peek()), RESULT);
            }
          return CUP$StructuresParse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // design_attrs ::= design_attr SEMICOLON 
            {
              GenericElement RESULT =null;
		int attrleft = ((java_cup.runtime.Symbol)CUP$StructuresParse$stack.elementAt(CUP$StructuresParse$top-1)).left;
		int attrright = ((java_cup.runtime.Symbol)CUP$StructuresParse$stack.elementAt(CUP$StructuresParse$top-1)).right;
		GenericAttr attr = (GenericAttr)((java_cup.runtime.Symbol) CUP$StructuresParse$stack.elementAt(CUP$StructuresParse$top-1)).value;
		
                    RESULT = new GenericElement();
                    RESULT.addAttr(attr);
                
              CUP$StructuresParse$result = parser.getSymbolFactory().newSymbol("design_attrs",23, ((java_cup.runtime.Symbol)CUP$StructuresParse$stack.elementAt(CUP$StructuresParse$top-1)), ((java_cup.runtime.Symbol)CUP$StructuresParse$stack.peek()), RESULT);
            }
          return CUP$StructuresParse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // design_element ::= O_BRACE design_attrs C_BRACE 
            {
              Object RESULT =null;
		int designleft = ((java_cup.runtime.Symbol)CUP$StructuresParse$stack.elementAt(CUP$StructuresParse$top-1)).left;
		int designright = ((java_cup.runtime.Symbol)CUP$StructuresParse$stack.elementAt(CUP$StructuresParse$top-1)).right;
		GenericElement design = (GenericElement)((java_cup.runtime.Symbol) CUP$StructuresParse$stack.elementAt(CUP$StructuresParse$top-1)).value;
		
                    this.parser.designs.add(design);
                
              CUP$StructuresParse$result = parser.getSymbolFactory().newSymbol("design_element",14, ((java_cup.runtime.Symbol)CUP$StructuresParse$stack.elementAt(CUP$StructuresParse$top-2)), ((java_cup.runtime.Symbol)CUP$StructuresParse$stack.peek()), RESULT);
            }
          return CUP$StructuresParse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // design_elements ::= design_element COMMA design_elements 
            {
              Object RESULT =null;

              CUP$StructuresParse$result = parser.getSymbolFactory().newSymbol("design_elements",13, ((java_cup.runtime.Symbol)CUP$StructuresParse$stack.elementAt(CUP$StructuresParse$top-2)), ((java_cup.runtime.Symbol)CUP$StructuresParse$stack.peek()), RESULT);
            }
          return CUP$StructuresParse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // design_elements ::= design_element 
            {
              Object RESULT =null;

              CUP$StructuresParse$result = parser.getSymbolFactory().newSymbol("design_elements",13, ((java_cup.runtime.Symbol)CUP$StructuresParse$stack.peek()), ((java_cup.runtime.Symbol)CUP$StructuresParse$stack.peek()), RESULT);
            }
          return CUP$StructuresParse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // design ::= INIT_DESIGN design_elements END_DESIGN 
            {
              Object RESULT =null;

              CUP$StructuresParse$result = parser.getSymbolFactory().newSymbol("design",12, ((java_cup.runtime.Symbol)CUP$StructuresParse$stack.elementAt(CUP$StructuresParse$top-2)), ((java_cup.runtime.Symbol)CUP$StructuresParse$stack.peek()), RESULT);
            }
          return CUP$StructuresParse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // figure_description ::= DESCRIPTION EQUAL STRING 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$StructuresParse$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$StructuresParse$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$StructuresParse$stack.peek()).value;
		 RESULT = s; 
              CUP$StructuresParse$result = parser.getSymbolFactory().newSymbol("figure_description",11, ((java_cup.runtime.Symbol)CUP$StructuresParse$stack.elementAt(CUP$StructuresParse$top-2)), ((java_cup.runtime.Symbol)CUP$StructuresParse$stack.peek()), RESULT);
            }
          return CUP$StructuresParse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // figure_destroy ::= DESTROY EQUAL INT 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$StructuresParse$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$StructuresParse$stack.peek()).right;
		Integer i = (Integer)((java_cup.runtime.Symbol) CUP$StructuresParse$stack.peek()).value;
		 RESULT = i; 
              CUP$StructuresParse$result = parser.getSymbolFactory().newSymbol("figure_destroy",10, ((java_cup.runtime.Symbol)CUP$StructuresParse$stack.elementAt(CUP$StructuresParse$top-2)), ((java_cup.runtime.Symbol)CUP$StructuresParse$stack.peek()), RESULT);
            }
          return CUP$StructuresParse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // figure_live ::= LIVE EQUAL INT 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$StructuresParse$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$StructuresParse$stack.peek()).right;
		Integer i = (Integer)((java_cup.runtime.Symbol) CUP$StructuresParse$stack.peek()).value;
		 RESULT = i; 
              CUP$StructuresParse$result = parser.getSymbolFactory().newSymbol("figure_live",9, ((java_cup.runtime.Symbol)CUP$StructuresParse$stack.elementAt(CUP$StructuresParse$top-2)), ((java_cup.runtime.Symbol)CUP$StructuresParse$stack.peek()), RESULT);
            }
          return CUP$StructuresParse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // figure_type ::= generic_type ENEMY 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$StructuresParse$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$StructuresParse$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$StructuresParse$stack.peek()).value;
		
                    RESULT = e;
                
              CUP$StructuresParse$result = parser.getSymbolFactory().newSymbol("figure_type",24, ((java_cup.runtime.Symbol)CUP$StructuresParse$stack.elementAt(CUP$StructuresParse$top-1)), ((java_cup.runtime.Symbol)CUP$StructuresParse$stack.peek()), RESULT);
            }
          return CUP$StructuresParse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // figure_type ::= generic_type HERO 
            {
              String RESULT =null;
		int hleft = ((java_cup.runtime.Symbol)CUP$StructuresParse$stack.peek()).left;
		int hright = ((java_cup.runtime.Symbol)CUP$StructuresParse$stack.peek()).right;
		String h = (String)((java_cup.runtime.Symbol) CUP$StructuresParse$stack.peek()).value;
		
                    RESULT = h;
                
              CUP$StructuresParse$result = parser.getSymbolFactory().newSymbol("figure_type",24, ((java_cup.runtime.Symbol)CUP$StructuresParse$stack.elementAt(CUP$StructuresParse$top-1)), ((java_cup.runtime.Symbol)CUP$StructuresParse$stack.peek()), RESULT);
            }
          return CUP$StructuresParse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // figure_attr ::= figure_description 
            {
              GenericAttr RESULT =null;
		int descriptionleft = ((java_cup.runtime.Symbol)CUP$StructuresParse$stack.peek()).left;
		int descriptionright = ((java_cup.runtime.Symbol)CUP$StructuresParse$stack.peek()).right;
		Object description = (Object)((java_cup.runtime.Symbol) CUP$StructuresParse$stack.peek()).value;
		
                    RESULT = new GenericAttr<String>();
                    RESULT.setType("description");
                    RESULT.setValue(description);
                
              CUP$StructuresParse$result = parser.getSymbolFactory().newSymbol("figure_attr",19, ((java_cup.runtime.Symbol)CUP$StructuresParse$stack.peek()), ((java_cup.runtime.Symbol)CUP$StructuresParse$stack.peek()), RESULT);
            }
          return CUP$StructuresParse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // figure_attr ::= figure_destroy 
            {
              GenericAttr RESULT =null;
		int destroyleft = ((java_cup.runtime.Symbol)CUP$StructuresParse$stack.peek()).left;
		int destroyright = ((java_cup.runtime.Symbol)CUP$StructuresParse$stack.peek()).right;
		Object destroy = (Object)((java_cup.runtime.Symbol) CUP$StructuresParse$stack.peek()).value;
		
                    RESULT = new GenericAttr<Integer>();
                    RESULT.setType("destroy");
                    RESULT.setValue(destroy);
                
              CUP$StructuresParse$result = parser.getSymbolFactory().newSymbol("figure_attr",19, ((java_cup.runtime.Symbol)CUP$StructuresParse$stack.peek()), ((java_cup.runtime.Symbol)CUP$StructuresParse$stack.peek()), RESULT);
            }
          return CUP$StructuresParse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // figure_attr ::= figure_live 
            {
              GenericAttr RESULT =null;
		int liveleft = ((java_cup.runtime.Symbol)CUP$StructuresParse$stack.peek()).left;
		int liveright = ((java_cup.runtime.Symbol)CUP$StructuresParse$stack.peek()).right;
		Object live = (Object)((java_cup.runtime.Symbol) CUP$StructuresParse$stack.peek()).value;
		
                    RESULT = new GenericAttr<Integer>();
                    RESULT.setType("live");
                    RESULT.setValue(live);
                
              CUP$StructuresParse$result = parser.getSymbolFactory().newSymbol("figure_attr",19, ((java_cup.runtime.Symbol)CUP$StructuresParse$stack.peek()), ((java_cup.runtime.Symbol)CUP$StructuresParse$stack.peek()), RESULT);
            }
          return CUP$StructuresParse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // figure_attr ::= figure_type 
            {
              GenericAttr RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$StructuresParse$stack.peek()).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$StructuresParse$stack.peek()).right;
		String type = (String)((java_cup.runtime.Symbol) CUP$StructuresParse$stack.peek()).value;
		
                    RESULT = new GenericAttr<String>();
                    RESULT.setType("type");
                    RESULT.setValue(type);
                
              CUP$StructuresParse$result = parser.getSymbolFactory().newSymbol("figure_attr",19, ((java_cup.runtime.Symbol)CUP$StructuresParse$stack.peek()), ((java_cup.runtime.Symbol)CUP$StructuresParse$stack.peek()), RESULT);
            }
          return CUP$StructuresParse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // figure_attr ::= picture 
            {
              GenericAttr RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$StructuresParse$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$StructuresParse$stack.peek()).right;
		String p = (String)((java_cup.runtime.Symbol) CUP$StructuresParse$stack.peek()).value;
		
                    RESULT = new GenericAttr<String>();
                    RESULT.setType("picture");
                    RESULT.setValue(p);
                
              CUP$StructuresParse$result = parser.getSymbolFactory().newSymbol("figure_attr",19, ((java_cup.runtime.Symbol)CUP$StructuresParse$stack.peek()), ((java_cup.runtime.Symbol)CUP$StructuresParse$stack.peek()), RESULT);
            }
          return CUP$StructuresParse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // figure_attr ::= name 
            {
              GenericAttr RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$StructuresParse$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$StructuresParse$stack.peek()).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$StructuresParse$stack.peek()).value;
		
                    RESULT = new GenericAttr<String>();
                    RESULT.setType("name");
                    RESULT.setValue(n);
                
              CUP$StructuresParse$result = parser.getSymbolFactory().newSymbol("figure_attr",19, ((java_cup.runtime.Symbol)CUP$StructuresParse$stack.peek()), ((java_cup.runtime.Symbol)CUP$StructuresParse$stack.peek()), RESULT);
            }
          return CUP$StructuresParse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // figure_attrs ::= figure_attr SEMICOLON figure_attrs 
            {
              GenericElement RESULT =null;
		int attrleft = ((java_cup.runtime.Symbol)CUP$StructuresParse$stack.elementAt(CUP$StructuresParse$top-2)).left;
		int attrright = ((java_cup.runtime.Symbol)CUP$StructuresParse$stack.elementAt(CUP$StructuresParse$top-2)).right;
		GenericAttr attr = (GenericAttr)((java_cup.runtime.Symbol) CUP$StructuresParse$stack.elementAt(CUP$StructuresParse$top-2)).value;
		int attrsleft = ((java_cup.runtime.Symbol)CUP$StructuresParse$stack.peek()).left;
		int attrsright = ((java_cup.runtime.Symbol)CUP$StructuresParse$stack.peek()).right;
		GenericElement attrs = (GenericElement)((java_cup.runtime.Symbol) CUP$StructuresParse$stack.peek()).value;
		
                    RESULT = new GenericElement();
                    RESULT.addAttr(attr);
                    RESULT.addAll(attrs);
                
              CUP$StructuresParse$result = parser.getSymbolFactory().newSymbol("figure_attrs",22, ((java_cup.runtime.Symbol)CUP$StructuresParse$stack.elementAt(CUP$StructuresParse$top-2)), ((java_cup.runtime.Symbol)CUP$StructuresParse$stack.peek()), RESULT);
            }
          return CUP$StructuresParse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // figure_attrs ::= figure_attr SEMICOLON 
            {
              GenericElement RESULT =null;
		int attrleft = ((java_cup.runtime.Symbol)CUP$StructuresParse$stack.elementAt(CUP$StructuresParse$top-1)).left;
		int attrright = ((java_cup.runtime.Symbol)CUP$StructuresParse$stack.elementAt(CUP$StructuresParse$top-1)).right;
		GenericAttr attr = (GenericAttr)((java_cup.runtime.Symbol) CUP$StructuresParse$stack.elementAt(CUP$StructuresParse$top-1)).value;
		
                    RESULT = new GenericElement();
                    RESULT.addAttr(attr);
                
              CUP$StructuresParse$result = parser.getSymbolFactory().newSymbol("figure_attrs",22, ((java_cup.runtime.Symbol)CUP$StructuresParse$stack.elementAt(CUP$StructuresParse$top-1)), ((java_cup.runtime.Symbol)CUP$StructuresParse$stack.peek()), RESULT);
            }
          return CUP$StructuresParse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // figure_element ::= O_BRACE figure_attrs C_BRACE 
            {
              Object RESULT =null;
		int figureleft = ((java_cup.runtime.Symbol)CUP$StructuresParse$stack.elementAt(CUP$StructuresParse$top-1)).left;
		int figureright = ((java_cup.runtime.Symbol)CUP$StructuresParse$stack.elementAt(CUP$StructuresParse$top-1)).right;
		GenericElement figure = (GenericElement)((java_cup.runtime.Symbol) CUP$StructuresParse$stack.elementAt(CUP$StructuresParse$top-1)).value;
		
                    this.parser.figures.add(figure);
                
              CUP$StructuresParse$result = parser.getSymbolFactory().newSymbol("figure_element",8, ((java_cup.runtime.Symbol)CUP$StructuresParse$stack.elementAt(CUP$StructuresParse$top-2)), ((java_cup.runtime.Symbol)CUP$StructuresParse$stack.peek()), RESULT);
            }
          return CUP$StructuresParse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // figure_elements ::= figure_element COMMA figure_elements 
            {
              Object RESULT =null;

              CUP$StructuresParse$result = parser.getSymbolFactory().newSymbol("figure_elements",7, ((java_cup.runtime.Symbol)CUP$StructuresParse$stack.elementAt(CUP$StructuresParse$top-2)), ((java_cup.runtime.Symbol)CUP$StructuresParse$stack.peek()), RESULT);
            }
          return CUP$StructuresParse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // figure_elements ::= figure_element 
            {
              Object RESULT =null;

              CUP$StructuresParse$result = parser.getSymbolFactory().newSymbol("figure_elements",7, ((java_cup.runtime.Symbol)CUP$StructuresParse$stack.peek()), ((java_cup.runtime.Symbol)CUP$StructuresParse$stack.peek()), RESULT);
            }
          return CUP$StructuresParse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // figure ::= INIT_FIGURE figure_elements END_FIGURE 
            {
              Object RESULT =null;

              CUP$StructuresParse$result = parser.getSymbolFactory().newSymbol("figure",6, ((java_cup.runtime.Symbol)CUP$StructuresParse$stack.elementAt(CUP$StructuresParse$top-2)), ((java_cup.runtime.Symbol)CUP$StructuresParse$stack.peek()), RESULT);
            }
          return CUP$StructuresParse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // bg_attr ::= picture 
            {
              GenericAttr RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$StructuresParse$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$StructuresParse$stack.peek()).right;
		String p = (String)((java_cup.runtime.Symbol) CUP$StructuresParse$stack.peek()).value;
		
                RESULT = new GenericAttr<String>();
                RESULT.setType("picture");
                RESULT.setValue(p);
            
              CUP$StructuresParse$result = parser.getSymbolFactory().newSymbol("bg_attr",18, ((java_cup.runtime.Symbol)CUP$StructuresParse$stack.peek()), ((java_cup.runtime.Symbol)CUP$StructuresParse$stack.peek()), RESULT);
            }
          return CUP$StructuresParse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // bg_attr ::= name 
            {
              GenericAttr RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$StructuresParse$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$StructuresParse$stack.peek()).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$StructuresParse$stack.peek()).value;
		
                RESULT = new GenericAttr<String>();
                RESULT.setType("name");
                RESULT.setValue(n);
            
              CUP$StructuresParse$result = parser.getSymbolFactory().newSymbol("bg_attr",18, ((java_cup.runtime.Symbol)CUP$StructuresParse$stack.peek()), ((java_cup.runtime.Symbol)CUP$StructuresParse$stack.peek()), RESULT);
            }
          return CUP$StructuresParse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // bg_attrs ::= bg_attr SEMICOLON bg_attrs 
            {
              GenericElement RESULT =null;
		int attrleft = ((java_cup.runtime.Symbol)CUP$StructuresParse$stack.elementAt(CUP$StructuresParse$top-2)).left;
		int attrright = ((java_cup.runtime.Symbol)CUP$StructuresParse$stack.elementAt(CUP$StructuresParse$top-2)).right;
		GenericAttr attr = (GenericAttr)((java_cup.runtime.Symbol) CUP$StructuresParse$stack.elementAt(CUP$StructuresParse$top-2)).value;
		int attrsleft = ((java_cup.runtime.Symbol)CUP$StructuresParse$stack.peek()).left;
		int attrsright = ((java_cup.runtime.Symbol)CUP$StructuresParse$stack.peek()).right;
		GenericElement attrs = (GenericElement)((java_cup.runtime.Symbol) CUP$StructuresParse$stack.peek()).value;
		
                RESULT = new GenericElement();
                RESULT.addAttr(attr);
                RESULT.addAll(attrs);
            
              CUP$StructuresParse$result = parser.getSymbolFactory().newSymbol("bg_attrs",21, ((java_cup.runtime.Symbol)CUP$StructuresParse$stack.elementAt(CUP$StructuresParse$top-2)), ((java_cup.runtime.Symbol)CUP$StructuresParse$stack.peek()), RESULT);
            }
          return CUP$StructuresParse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // bg_attrs ::= bg_attr SEMICOLON 
            {
              GenericElement RESULT =null;
		int attrleft = ((java_cup.runtime.Symbol)CUP$StructuresParse$stack.elementAt(CUP$StructuresParse$top-1)).left;
		int attrright = ((java_cup.runtime.Symbol)CUP$StructuresParse$stack.elementAt(CUP$StructuresParse$top-1)).right;
		GenericAttr attr = (GenericAttr)((java_cup.runtime.Symbol) CUP$StructuresParse$stack.elementAt(CUP$StructuresParse$top-1)).value;
		
                RESULT = new GenericElement();
                RESULT.addAttr(attr);
            
              CUP$StructuresParse$result = parser.getSymbolFactory().newSymbol("bg_attrs",21, ((java_cup.runtime.Symbol)CUP$StructuresParse$stack.elementAt(CUP$StructuresParse$top-1)), ((java_cup.runtime.Symbol)CUP$StructuresParse$stack.peek()), RESULT);
            }
          return CUP$StructuresParse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // bg_element ::= O_BRACE bg_attrs C_BRACE 
            {
              Object RESULT =null;
		int bgleft = ((java_cup.runtime.Symbol)CUP$StructuresParse$stack.elementAt(CUP$StructuresParse$top-1)).left;
		int bgright = ((java_cup.runtime.Symbol)CUP$StructuresParse$stack.elementAt(CUP$StructuresParse$top-1)).right;
		GenericElement bg = (GenericElement)((java_cup.runtime.Symbol) CUP$StructuresParse$stack.elementAt(CUP$StructuresParse$top-1)).value;
		
    // background element found.
    this.parser.bgs.add(bg);

              CUP$StructuresParse$result = parser.getSymbolFactory().newSymbol("bg_element",5, ((java_cup.runtime.Symbol)CUP$StructuresParse$stack.elementAt(CUP$StructuresParse$top-2)), ((java_cup.runtime.Symbol)CUP$StructuresParse$stack.peek()), RESULT);
            }
          return CUP$StructuresParse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // bg_elements ::= bg_element COMMA bg_elements 
            {
              Object RESULT =null;

              CUP$StructuresParse$result = parser.getSymbolFactory().newSymbol("bg_elements",4, ((java_cup.runtime.Symbol)CUP$StructuresParse$stack.elementAt(CUP$StructuresParse$top-2)), ((java_cup.runtime.Symbol)CUP$StructuresParse$stack.peek()), RESULT);
            }
          return CUP$StructuresParse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // bg_elements ::= bg_element 
            {
              Object RESULT =null;

              CUP$StructuresParse$result = parser.getSymbolFactory().newSymbol("bg_elements",4, ((java_cup.runtime.Symbol)CUP$StructuresParse$stack.peek()), ((java_cup.runtime.Symbol)CUP$StructuresParse$stack.peek()), RESULT);
            }
          return CUP$StructuresParse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // bg ::= INIT_BG bg_elements END_BG 
            {
              Object RESULT =null;

              CUP$StructuresParse$result = parser.getSymbolFactory().newSymbol("bg",3, ((java_cup.runtime.Symbol)CUP$StructuresParse$stack.elementAt(CUP$StructuresParse$top-2)), ((java_cup.runtime.Symbol)CUP$StructuresParse$stack.peek()), RESULT);
            }
          return CUP$StructuresParse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // element_conf ::= design 
            {
              Object RESULT =null;

              CUP$StructuresParse$result = parser.getSymbolFactory().newSymbol("element_conf",2, ((java_cup.runtime.Symbol)CUP$StructuresParse$stack.peek()), ((java_cup.runtime.Symbol)CUP$StructuresParse$stack.peek()), RESULT);
            }
          return CUP$StructuresParse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // element_conf ::= figure 
            {
              Object RESULT =null;

              CUP$StructuresParse$result = parser.getSymbolFactory().newSymbol("element_conf",2, ((java_cup.runtime.Symbol)CUP$StructuresParse$stack.peek()), ((java_cup.runtime.Symbol)CUP$StructuresParse$stack.peek()), RESULT);
            }
          return CUP$StructuresParse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // element_conf ::= bg 
            {
              Object RESULT =null;

              CUP$StructuresParse$result = parser.getSymbolFactory().newSymbol("element_conf",2, ((java_cup.runtime.Symbol)CUP$StructuresParse$stack.peek()), ((java_cup.runtime.Symbol)CUP$StructuresParse$stack.peek()), RESULT);
            }
          return CUP$StructuresParse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // elements_conf ::= element_conf elements_conf 
            {
              Object RESULT =null;

              CUP$StructuresParse$result = parser.getSymbolFactory().newSymbol("elements_conf",1, ((java_cup.runtime.Symbol)CUP$StructuresParse$stack.elementAt(CUP$StructuresParse$top-1)), ((java_cup.runtime.Symbol)CUP$StructuresParse$stack.peek()), RESULT);
            }
          return CUP$StructuresParse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // elements_conf ::= element_conf 
            {
              Object RESULT =null;

              CUP$StructuresParse$result = parser.getSymbolFactory().newSymbol("elements_conf",1, ((java_cup.runtime.Symbol)CUP$StructuresParse$stack.peek()), ((java_cup.runtime.Symbol)CUP$StructuresParse$stack.peek()), RESULT);
            }
          return CUP$StructuresParse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // structures ::= INIT_CONF elements_conf END_CONF 
            {
              Object RESULT =null;

              CUP$StructuresParse$result = parser.getSymbolFactory().newSymbol("structures",0, ((java_cup.runtime.Symbol)CUP$StructuresParse$stack.elementAt(CUP$StructuresParse$top-2)), ((java_cup.runtime.Symbol)CUP$StructuresParse$stack.peek()), RESULT);
            }
          return CUP$StructuresParse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= structures EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$StructuresParse$stack.elementAt(CUP$StructuresParse$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$StructuresParse$stack.elementAt(CUP$StructuresParse$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$StructuresParse$stack.elementAt(CUP$StructuresParse$top-1)).value;
		RESULT = start_val;
              CUP$StructuresParse$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$StructuresParse$stack.elementAt(CUP$StructuresParse$top-1)), ((java_cup.runtime.Symbol)CUP$StructuresParse$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$StructuresParse$parser.done_parsing();
          return CUP$StructuresParse$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

