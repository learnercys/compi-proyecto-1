package net.project.parser.scenarios;

import java_cup.runtime.*;
import java.util.ArrayList;
import java.util.HashMap;
import java.awt.Point;
import net.project.utils.Scenario;
import net.project.utils.GenericAttr;
import net.project.utils.GenericElement;
import net.project.utils.Point2D;

parser code{:
    public boolean hasUnRecoveredSyntaxError = false;
    public ArrayList<HashMap<String, String>> errors = new ArrayList<>();
    public ArrayList<Scenario> scenarios = new ArrayList<>();

    public void syntax_error(Symbol cur_token) {
            HashMap<String, String> error = new HashMap<>();
            error.put("text", (String) cur_token.value);
            // todo add token type
            error.put("number", Integer.toString(errors.size() + 1));
            errors.add( error );
        }
:}

terminal

    // tags
    INIT_SCENARIO,
    END_SCENARIO,
    INIT_CHARACTERS,
    END_CHARACTERS,
    INIT_HEROES,
    END_HEROES,
    INIT_VILLAINS,
    END_VILLAINS,
    INIT_WALLS,
    END_WALLS,
    INIT_FLOOR,
    END_FLOOR,
    INIT_EXTRAS,
    END_EXTRAS,
    INIT_WEAPONS,
    END_WEAPONS,
    INIT_BONUS,
    END_BONUS,
    INIT_FINISH,
    END_FINISH,

    // single chars
    O_PAREN,
    C_PAREN,
    COMMA,
    DOT,
    EQUAL,
    SEMICOLON,
    MORE_THAN,

    // single words
    NAME,
    BG,
    HEIGHT,
    WIDTH

    // ER
    ;

terminal String
    ID;

terminal Integer
    INT;

non terminal
    scenarios;

non terminal String
    name,
    bg;

non terminal Integer
    height,
    width;

non terminal GenericAttr
    scenario_element,
    scenario_attr,
    characters_element,
    villains_element,
    walls_element,
    floors_element,
    extras_element,
    weapons_element,
    bonus_element,
    finish_element;


non terminal GenericElement
    scenario_elements,
    scenario_attrs,
    characters,
    characters_elements,
    heroes,
    villains,
    villains_elements,

    walls,
    walls_elements,
    floors,
    floors_elements,
    extras,
    extras_elements,
    extras_weapons,
    weapons_elements,
    extras_bonus,
    bonus_elements,
    finish,
    finish_elements;

non terminal Scenario
    scenario;

non terminal Point
    int_range;

start with scenarios;

scenarios::= scenario:s{:
                this.parser.scenarios.add(s);
                System.out.println("add scenario");
            :}
            | scenario:s scenarios{:
                this.parser.scenarios.add(s);
                System.out.println("add scenario");
            :}
            | error;

scenario::= INIT_SCENARIO scenario_attrs:attrs MORE_THAN scenario_elements:elements END_SCENARIO{:
    RESULT = new Scenario();
    RESULT.setName((String)attrs.getAttr("name").getValue());
    RESULT.setHeight((Integer)attrs.getAttr("height").getValue());
    RESULT.setWidth((Integer)attrs.getAttr("width").getValue());
    RESULT.setBg((String)attrs.getAttr("bg").getValue());
    RESULT.setElements(elements);
:};

scenario_attrs::= scenario_attr:attr SEMICOLON{:
                    RESULT = new GenericElement();
                    RESULT.addAttr(attr);
                :}
                | scenario_attr:attr SEMICOLON scenario_attrs:attrs{:
                    RESULT = new GenericElement();
                    RESULT.addAttr(attr);
                    RESULT.addAll(attrs);
                :};

scenario_attr::= name:n{:
                    RESULT = new GenericAttr<String>();
                    RESULT.setType("name");
                    RESULT.setValue(n);
                :}
                | bg:bg{:
                    RESULT = new GenericAttr<String>();
                    RESULT.setType("bg");
                    RESULT.setValue(bg);
                :}
                | height:height{:
                    RESULT = new GenericAttr<Integer>();
                    RESULT.setType("height");
                    RESULT.setValue(height);
                :}
                | width:width{:
                   RESULT = new GenericAttr<Integer>();
                   RESULT.setType("width");
                   RESULT.setValue(width);
               :};

name::= NAME EQUAL ID:id{: RESULT = id; :};

bg::= BG EQUAL ID:id{: RESULT = id; :};

height::= HEIGHT EQUAL INT:i{: RESULT = i; :};

width::= WIDTH EQUAL INT:i{: RESULT = i; :};

scenario_elements::= scenario_element:element{:
                        RESULT = new GenericElement();
                        RESULT.addAttr(element);
                    :}
                    | scenario_element:element scenario_elements:elements{:
                        RESULT = new GenericElement();
                        RESULT.addAttr(element);
                        RESULT.addAll(elements);
                    :};

scenario_element::= characters:c{:
                        RESULT = new GenericAttr<GenericElement>();
                        RESULT.setType("characters");
                        RESULT.setValue(c);
                    :}
                    | walls:w{:
                        RESULT = new GenericAttr<GenericElement>();
                        RESULT.setType("walls");
                        RESULT.setValue(w);
                    :}
                    | floors:f{:
                        RESULT = new GenericAttr<GenericElement>();
                        RESULT.setType("floors");
                        RESULT.setValue(f);
                    :}
                    | extras:e{:
                        RESULT = new GenericAttr<GenericElement>();
                        RESULT.setType("extras");
                        RESULT.setValue(e);
                    :}
                    | finish:f{:
                        RESULT = new GenericAttr<GenericElement>();
                        RESULT.setType("finish");
                        RESULT.setValue(f);
                    :};

characters::= INIT_CHARACTERS characters_elements:elements END_CHARACTERS{:
    RESULT = elements;
:};

characters_elements::= characters_element:element{:
                            RESULT = new GenericElement();
                            RESULT.addAttr(element);
                        :}
                        | characters_element:element characters_elements:elements{:
                            RESULT = new GenericElement();
                            RESULT.addAttr(element);
                            RESULT.addAll(elements);
                        :};

characters_element::= heroes:h{:
                            RESULT = new GenericAttr<GenericElement>();
                            RESULT.setType("hero");
                            RESULT.setValue(h);
                        :}
                        | villains:v{:
                            RESULT = new GenericAttr<GenericElement>();
                            RESULT.setType("villains");
                            RESULT.setValue(v);
                        :};

heroes::= INIT_HEROES ID:name O_PAREN INT:x COMMA INT:y C_PAREN SEMICOLON END_HEROES{:
    RESULT = new GenericElement();
    GenericAttr<String> n = new GenericAttr<>();
    n.setType("name");
    n.setValue(name);
    RESULT.addAttr(n);

    GenericAttr<Integer> tmpY = new GenericAttr<>();
    tmpY.setType("y");
    tmpY.setValue(y);
    RESULT.addAttr(tmpY);

    GenericAttr<Integer> tmpX = new GenericAttr<>();
    tmpX.setType("x");
    tmpX.setValue(x);
    RESULT.addAttr(tmpX);
:};

villains::= INIT_VILLAINS villains_elements:elements END_VILLAINS{:
    RESULT = elements;
:};

villains_elements::= villains_element:element{:
                        RESULT = new GenericElement();
                        RESULT.addAttr(element);
                    :}
                    | villains_element:element villains_elements:elements{:
                        RESULT = new GenericElement();
                        RESULT.addAttr(element);
                        RESULT.addAll(elements);
                    :};

villains_element::= ID:name O_PAREN INT:x COMMA INT:y C_PAREN SEMICOLON{:
    RESULT = new GenericAttr<GenericElement>();
    RESULT.setType("villain"); // unnecessary, I'm boring

    GenericElement villain = new GenericElement();

    GenericAttr<String> n = new GenericAttr<>();
    n.setType("name");
    n.setValue(name);
    villain.addAttr(n);

    GenericAttr<Integer> tmpY = new GenericAttr<>();
    tmpY.setType("y");
    tmpY.setValue(y);
    villain.addAttr(tmpY);

    GenericAttr<Integer> tmpX = new GenericAttr<>();
    tmpX.setType("x");
    tmpX.setValue(x);
    villain.addAttr(tmpX);

    RESULT.setValue(villain);

:};

walls::= INIT_WALLS walls_elements:elements END_WALLS{:
    RESULT = elements;
:};

walls_elements::= walls_element:element{:
                    RESULT = new GenericElement();
                    RESULT.addAttr(element);
                :}
                | walls_element:element walls_elements:elements{:
                    RESULT = new GenericElement();
                    RESULT.addAttr(element);
                    RESULT.addAll(elements);
                :};

walls_element::= ID:name O_PAREN int_range:rangeX COMMA int_range:rangeY C_PAREN SEMICOLON{:
    RESULT = new GenericAttr<GenericElement>();
    RESULT.setType("wall");

    GenericElement wall = new GenericElement();

    // set the name
    GenericAttr<String> n = new GenericAttr<>();
    n.setType("name");
    n.setValue(name);
    wall.addAttr(n);

    // set the range
    GenericAttr<Point2D> p = new GenericAttr<>();
    p.setType("range");
    p.setValue(new Point2D((int)rangeX.getX(), (int)rangeX.getY(), (int)rangeY.getX(), (int)rangeY.getY()));
    wall.addAttr(p);

    RESULT.setValue(wall);

:};

floors::= INIT_FLOOR floors_elements:elements END_FLOOR{:
    RESULT = elements;
:};

floors_elements::= floors_element:element{:
                        RESULT = new GenericElement();
                        RESULT.addAttr(element);
                    :}
                    | floors_element:element floors_elements:elements{:
                        RESULT = new GenericElement();
                        RESULT.addAttr(element);
                        RESULT.addAll(elements);
                    :};

floors_element::= ID:name O_PAREN int_range:rangeX COMMA int_range:rangeY C_PAREN SEMICOLON{:
    RESULT = new GenericAttr<GenericElement>();
    RESULT.setType("floor");

    GenericElement floor = new GenericElement();

    // set the name
    GenericAttr<String> n = new GenericAttr<>();
    n.setType("name");
    n.setValue(name);
    floor.addAttr(n);

    // set the range
    GenericAttr<Point2D> p = new GenericAttr<>();
    p.setType("range");
    p.setValue(new Point2D((int)rangeX.getX(), (int)rangeX.getY(), (int)rangeY.getX(), (int)rangeY.getY()));
    floor.addAttr(p);

    RESULT.setValue(floor);
:};

extras::= INIT_EXTRAS extras_elements:elements END_EXTRAS{:
    RESULT =    elements;
:};

extras_elements::= extras_element:element{:
                        RESULT = new GenericElement();
                        RESULT.addAttr(element);
                    :}
                    | extras_element:element extras_elements:elements{:
                        RESULT = new GenericElement();
                        RESULT.addAttr(element);
                        RESULT.addAll(elements);
                    :};

extras_element::= extras_weapons:w{:
                        RESULT = new GenericAttr<GenericElement>();
                        RESULT.setType("weapons");
                        RESULT.setValue(w);
                    :}
                    | extras_bonus:b{:
                        RESULT = new GenericAttr<GenericElement>();
                        RESULT.setType("bonus");
                        RESULT.setValue(b);
                    :};

extras_weapons::= INIT_WEAPONS weapons_elements:elements END_WEAPONS{:
    RESULT = elements;
:};

weapons_elements::= weapons_element:element{:
                        RESULT = new GenericElement();
                        RESULT.addAttr(element);
                    :}
                    | weapons_element:element weapons_elements:elements{:
                        RESULT = new GenericElement();
                        RESULT.addAttr(element);
                        RESULT.addAll(elements);
                    :};

weapons_element::= ID:name O_PAREN INT:x COMMA INT:y C_PAREN SEMICOLON{:
    RESULT = new GenericAttr<GenericElement>();
    RESULT.setType("weapon"); // unnecessary, I'm boring

    GenericElement weapon = new GenericElement();

    GenericAttr<String> n = new GenericAttr<>();
    n.setType("name");
    n.setValue(name);
    weapon.addAttr(n);

    GenericAttr<Integer> tmpY = new GenericAttr<>();
    tmpY.setType("y");
    tmpY.setValue(y);
    weapon.addAttr(tmpY);

    GenericAttr<Integer> tmpX = new GenericAttr<>();
    tmpX.setType("x");
    tmpX.setValue(x);
    weapon.addAttr(tmpX);

    RESULT.setValue(weapon);
:};

extras_bonus::= INIT_BONUS bonus_elements:elements END_BONUS{:
    RESULT = elements;
:};

bonus_elements::= bonus_element:element{:
                    RESULT = new GenericElement();
                    RESULT.addAttr(element);
                :}
                | bonus_element:element bonus_elements:elements{:
                    RESULT = new GenericElement();
                    RESULT.addAttr(element);
                    RESULT.addAll(elements);
                :};

bonus_element::= ID:name O_PAREN INT:x COMMA INT:y C_PAREN SEMICOLON{:
    RESULT = new GenericAttr<GenericElement>();
    RESULT.setType("bonus"); // unnecessary, I'm boring

    GenericElement bonus = new GenericElement();

    GenericAttr<String> n = new GenericAttr<>();
    n.setType("name");
    n.setValue(name);
    bonus.addAttr(n);

    GenericAttr<Integer> tmpY = new GenericAttr<>();
    tmpY.setType("y");
    tmpY.setValue(y);
    bonus.addAttr(tmpY);

    GenericAttr<Integer> tmpX = new GenericAttr<>();
    tmpX.setType("x");
    tmpX.setValue(x);
    bonus.addAttr(tmpX);

    RESULT.setValue(bonus);
:};

finish::= INIT_FINISH finish_elements:elements END_FINISH{:
    RESULT = elements;
:};

finish_elements::= finish_element:element{:
                        RESULT = new GenericElement();
                        RESULT.addAttr(element);
                    :}
                    | finish_element:element finish_elements:elements{:
                        RESULT = new GenericElement();
                        RESULT.addAttr(element);
                        RESULT.addAll(elements);
                    :};

finish_element::= ID:name O_PAREN INT:x COMMA INT:y C_PAREN SEMICOLON{:
    RESULT = new GenericAttr<GenericElement>();
    RESULT.setType("finish"); // unnecessary, I'm boring

    GenericElement finish = new GenericElement();

    GenericAttr<String> n = new GenericAttr<>();
    n.setType("name");
    n.setValue(name);
    finish.addAttr(n);

    GenericAttr<Integer> tmpY = new GenericAttr<>();
    tmpY.setType("y");
    tmpY.setValue(y);
    finish.addAttr(tmpY);

    GenericAttr<Integer> tmpX = new GenericAttr<>();
    tmpX.setType("x");
    tmpX.setValue(x);
    finish.addAttr(tmpX);

    RESULT.setValue(finish);
:};

int_range::= INT:i{:
                RESULT = new Point(i,i);
            :}
            | INT:x DOT DOT INT:y{:
                RESULT = new Point(x,y);
            :};
