
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Fri Oct 09 00:32:33 CST 2015
//----------------------------------------------------

package net.project.parser.scenarios;

import java_cup.runtime.*;
import java.util.ArrayList;
import java.util.HashMap;
import java.awt.Point;
import net.project.utils.Scenario;
import net.project.utils.GenericAttr;
import net.project.utils.GenericElement;
import net.project.utils.Point2D;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Fri Oct 09 00:32:33 CST 2015
  */
public class ScenariosParser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public ScenariosParser() {super();}

  /** Constructor which sets the default scanner. */
  public ScenariosParser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public ScenariosParser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\072\000\002\002\004\000\002\002\003\000\002\002" +
    "\004\000\002\044\007\000\002\022\004\000\002\022\005" +
    "\000\002\010\003\000\002\010\003\000\002\010\003\000" +
    "\002\010\003\000\002\003\005\000\002\004\005\000\002" +
    "\005\005\000\002\006\005\000\002\021\003\000\002\021" +
    "\004\000\002\007\003\000\002\007\003\000\002\007\003" +
    "\000\002\007\003\000\002\007\003\000\002\023\005\000" +
    "\002\024\003\000\002\024\004\000\002\011\003\000\002" +
    "\011\003\000\002\025\013\000\002\026\005\000\002\027" +
    "\003\000\002\027\004\000\002\012\011\000\002\030\005" +
    "\000\002\031\003\000\002\031\004\000\002\013\011\000" +
    "\002\032\005\000\002\033\003\000\002\033\004\000\002" +
    "\014\011\000\002\034\005\000\002\035\003\000\002\035" +
    "\004\000\002\015\003\000\002\015\003\000\002\036\005" +
    "\000\002\037\003\000\002\037\004\000\002\016\011\000" +
    "\002\040\005\000\002\041\003\000\002\041\004\000\002" +
    "\017\011\000\002\042\005\000\002\043\003\000\002\043" +
    "\004\000\002\020\011\000\002\045\003\000\002\045\006" +
    "" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\207\000\004\004\004\001\002\000\012\037\022\040" +
    "\021\041\015\042\017\001\002\000\006\002\000\004\004" +
    "\001\002\000\004\002\007\001\002\000\004\002\001\001" +
    "\002\000\004\002\uffff\001\002\000\004\035\ufffb\001\002" +
    "\000\004\035\ufff8\001\002\000\004\035\210\001\002\000" +
    "\004\035\ufffa\001\002\000\004\034\206\001\002\000\004" +
    "\036\031\001\002\000\004\034\027\001\002\000\004\035" +
    "\ufff9\001\002\000\004\034\025\001\002\000\004\034\023" +
    "\001\002\000\004\043\024\001\002\000\004\035\ufff7\001" +
    "\002\000\004\043\026\001\002\000\004\035\ufff6\001\002" +
    "\000\004\044\030\001\002\000\004\035\ufff4\001\002\000" +
    "\014\006\044\014\033\016\041\020\032\026\043\001\002" +
    "\000\006\022\154\024\150\001\002\000\004\043\135\001" +
    "\002\000\016\005\ufff0\006\ufff0\014\ufff0\016\ufff0\020\ufff0" +
    "\026\ufff0\001\002\000\016\005\ufff1\006\ufff1\014\ufff1\016" +
    "\ufff1\020\ufff1\026\ufff1\001\002\000\004\005\134\001\002" +
    "\000\016\005\uffee\006\uffee\014\uffee\016\uffee\020\uffee\026" +
    "\uffee\001\002\000\016\005\ufff3\006\044\014\033\016\041" +
    "\020\032\026\043\001\002\000\004\043\114\001\002\000" +
    "\016\005\uffef\006\uffef\014\uffef\016\uffef\020\uffef\026\uffef" +
    "\001\002\000\004\043\101\001\002\000\006\010\052\012" +
    "\053\001\002\000\016\005\uffed\006\uffed\014\uffed\016\uffed" +
    "\020\uffed\026\uffed\001\002\000\010\007\uffe8\010\uffe8\012" +
    "\uffe8\001\002\000\004\007\100\001\002\000\010\007\uffe9" +
    "\010\uffe9\012\uffe9\001\002\000\010\007\uffeb\010\052\012" +
    "\053\001\002\000\004\043\067\001\002\000\004\043\054" +
    "\001\002\000\004\030\061\001\002\000\006\013\uffe5\043" +
    "\054\001\002\000\004\013\057\001\002\000\010\007\uffe6" +
    "\010\uffe6\012\uffe6\001\002\000\004\013\uffe4\001\002\000" +
    "\004\044\062\001\002\000\004\032\063\001\002\000\004" +
    "\044\064\001\002\000\004\031\065\001\002\000\004\035" +
    "\066\001\002\000\006\013\uffe3\043\uffe3\001\002\000\004" +
    "\030\070\001\002\000\004\044\071\001\002\000\004\032" +
    "\072\001\002\000\004\044\073\001\002\000\004\031\074" +
    "\001\002\000\004\035\075\001\002\000\004\011\076\001" +
    "\002\000\010\007\uffe7\010\uffe7\012\uffe7\001\002\000\004" +
    "\007\uffea\001\002\000\016\005\uffec\006\uffec\014\uffec\016" +
    "\uffec\020\uffec\026\uffec\001\002\000\004\030\106\001\002" +
    "\000\004\027\105\001\002\000\006\027\uffcc\043\101\001" +
    "\002\000\004\027\uffcb\001\002\000\016\005\uffcd\006\uffcd" +
    "\014\uffcd\016\uffcd\020\uffcd\026\uffcd\001\002\000\004\044" +
    "\107\001\002\000\004\032\110\001\002\000\004\044\111" +
    "\001\002\000\004\031\112\001\002\000\004\035\113\001" +
    "\002\000\006\027\uffca\043\uffca\001\002\000\004\030\121" +
    "\001\002\000\006\017\uffdd\043\114\001\002\000\004\017" +
    "\117\001\002\000\016\005\uffde\006\uffde\014\uffde\016\uffde" +
    "\020\uffde\026\uffde\001\002\000\004\017\uffdc\001\002\000" +
    "\004\044\123\001\002\000\004\032\127\001\002\000\010" +
    "\031\uffc9\032\uffc9\033\124\001\002\000\004\033\125\001" +
    "\002\000\004\044\126\001\002\000\006\031\uffc8\032\uffc8" +
    "\001\002\000\004\044\123\001\002\000\004\031\131\001" +
    "\002\000\004\035\132\001\002\000\006\017\uffdb\043\uffdb" +
    "\001\002\000\004\005\ufff2\001\002\000\006\002\ufffe\004" +
    "\ufffe\001\002\000\004\030\142\001\002\000\006\015\uffe1" +
    "\043\135\001\002\000\004\015\140\001\002\000\016\005" +
    "\uffe2\006\uffe2\014\uffe2\016\uffe2\020\uffe2\026\uffe2\001\002" +
    "\000\004\015\uffe0\001\002\000\004\044\123\001\002\000" +
    "\004\032\144\001\002\000\004\044\123\001\002\000\004" +
    "\031\146\001\002\000\004\035\147\001\002\000\006\015" +
    "\uffdf\043\uffdf\001\002\000\004\043\173\001\002\000\010" +
    "\021\uffd9\022\154\024\150\001\002\000\004\021\171\001" +
    "\002\000\010\021\uffd6\022\uffd6\024\uffd6\001\002\000\004" +
    "\043\156\001\002\000\010\021\uffd7\022\uffd7\024\uffd7\001" +
    "\002\000\004\030\163\001\002\000\004\023\162\001\002" +
    "\000\006\023\uffd4\043\156\001\002\000\004\023\uffd3\001" +
    "\002\000\010\021\uffd5\022\uffd5\024\uffd5\001\002\000\004" +
    "\044\164\001\002\000\004\032\165\001\002\000\004\044" +
    "\166\001\002\000\004\031\167\001\002\000\004\035\170" +
    "\001\002\000\006\023\uffd2\043\uffd2\001\002\000\016\005" +
    "\uffda\006\uffda\014\uffda\016\uffda\020\uffda\026\uffda\001\002" +
    "\000\004\021\uffd8\001\002\000\004\030\200\001\002\000" +
    "\006\025\uffd0\043\173\001\002\000\004\025\176\001\002" +
    "\000\010\021\uffd1\022\uffd1\024\uffd1\001\002\000\004\025" +
    "\uffcf\001\002\000\004\044\201\001\002\000\004\032\202" +
    "\001\002\000\004\044\203\001\002\000\004\031\204\001" +
    "\002\000\004\035\205\001\002\000\006\025\uffce\043\uffce" +
    "\001\002\000\004\044\207\001\002\000\004\035\ufff5\001" +
    "\002\000\014\036\ufffd\037\022\040\021\041\015\042\017" +
    "\001\002\000\004\036\ufffc\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\207\000\006\002\005\044\004\001\001\000\016\003" +
    "\010\004\013\005\017\006\011\010\012\022\015\001\001" +
    "\000\006\002\007\044\004\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\020\007\037\021\035\023" +
    "\034\030\033\032\041\034\036\042\044\001\001\000\012" +
    "\015\150\035\151\036\154\040\152\001\001\000\006\013" +
    "\135\031\136\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\020\007\037\021" +
    "\132\023\034\030\033\032\041\034\036\042\044\001\001" +
    "\000\006\014\114\033\115\001\001\000\002\001\001\000" +
    "\006\020\102\043\101\001\001\000\012\011\050\024\046" +
    "\025\047\026\045\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\012\011\050" +
    "\024\076\025\047\026\045\001\001\000\002\001\001\000" +
    "\006\012\054\027\055\001\001\000\002\001\001\000\006" +
    "\012\054\027\057\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\020\102\043\103\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\014\114\033\117\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\045\121\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\045\127\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\013\135\031\140\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\045\142" +
    "\001\001\000\002\001\001\000\004\045\144\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\017\173\041\174\001\001\000\012\015\150\035\171\036" +
    "\154\040\152\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\016\157\037\156\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\016\157\037\160" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\017\173\041\176" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\016\003\010\004\013" +
    "\005\017\006\011\010\012\022\210\001\001\000\002\001" +
    "\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$ScenariosParser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$ScenariosParser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$ScenariosParser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    public boolean hasUnRecoveredSyntaxError = false;
    public ArrayList<HashMap<String, String>> errors = new ArrayList<>();
    public ArrayList<Scenario> scenarios = new ArrayList<>();

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$ScenariosParser$actions {
  private final ScenariosParser parser;

  /** Constructor */
  CUP$ScenariosParser$actions(ScenariosParser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$ScenariosParser$do_action(
    int                        CUP$ScenariosParser$act_num,
    java_cup.runtime.lr_parser CUP$ScenariosParser$parser,
    java.util.Stack            CUP$ScenariosParser$stack,
    int                        CUP$ScenariosParser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$ScenariosParser$result;

      /* select the action based on the action number */
      switch (CUP$ScenariosParser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // int_range ::= INT DOT DOT INT 
            {
              Point RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$ScenariosParser$stack.elementAt(CUP$ScenariosParser$top-3)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$ScenariosParser$stack.elementAt(CUP$ScenariosParser$top-3)).right;
		Integer x = (Integer)((java_cup.runtime.Symbol) CUP$ScenariosParser$stack.elementAt(CUP$ScenariosParser$top-3)).value;
		int yleft = ((java_cup.runtime.Symbol)CUP$ScenariosParser$stack.peek()).left;
		int yright = ((java_cup.runtime.Symbol)CUP$ScenariosParser$stack.peek()).right;
		Integer y = (Integer)((java_cup.runtime.Symbol) CUP$ScenariosParser$stack.peek()).value;
		
                RESULT = new Point(x,y);
            
              CUP$ScenariosParser$result = parser.getSymbolFactory().newSymbol("int_range",35, ((java_cup.runtime.Symbol)CUP$ScenariosParser$stack.elementAt(CUP$ScenariosParser$top-3)), ((java_cup.runtime.Symbol)CUP$ScenariosParser$stack.peek()), RESULT);
            }
          return CUP$ScenariosParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // int_range ::= INT 
            {
              Point RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$ScenariosParser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$ScenariosParser$stack.peek()).right;
		Integer i = (Integer)((java_cup.runtime.Symbol) CUP$ScenariosParser$stack.peek()).value;
		
                RESULT = new Point(i,i);
            
              CUP$ScenariosParser$result = parser.getSymbolFactory().newSymbol("int_range",35, ((java_cup.runtime.Symbol)CUP$ScenariosParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ScenariosParser$stack.peek()), RESULT);
            }
          return CUP$ScenariosParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // finish_element ::= ID O_PAREN INT COMMA INT C_PAREN SEMICOLON 
            {
              GenericAttr RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$ScenariosParser$stack.elementAt(CUP$ScenariosParser$top-6)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$ScenariosParser$stack.elementAt(CUP$ScenariosParser$top-6)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$ScenariosParser$stack.elementAt(CUP$ScenariosParser$top-6)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$ScenariosParser$stack.elementAt(CUP$ScenariosParser$top-4)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$ScenariosParser$stack.elementAt(CUP$ScenariosParser$top-4)).right;
		Integer x = (Integer)((java_cup.runtime.Symbol) CUP$ScenariosParser$stack.elementAt(CUP$ScenariosParser$top-4)).value;
		int yleft = ((java_cup.runtime.Symbol)CUP$ScenariosParser$stack.elementAt(CUP$ScenariosParser$top-2)).left;
		int yright = ((java_cup.runtime.Symbol)CUP$ScenariosParser$stack.elementAt(CUP$ScenariosParser$top-2)).right;
		Integer y = (Integer)((java_cup.runtime.Symbol) CUP$ScenariosParser$stack.elementAt(CUP$ScenariosParser$top-2)).value;
		
    RESULT = new GenericAttr<GenericElement>();
    RESULT.setType("finish"); // unnecessary, I'm boring

    GenericElement finish = new GenericElement();

    GenericAttr<String> n = new GenericAttr<>();
    n.setType("name");
    n.setValue(name);
    finish.addAttr(n);

    GenericAttr<Integer> tmpY = new GenericAttr<>();
    tmpY.setType("y");
    tmpY.setValue(y);
    finish.addAttr(tmpY);

    GenericAttr<Integer> tmpX = new GenericAttr<>();
    tmpX.setType("x");
    tmpX.setValue(x);
    finish.addAttr(tmpX);

    RESULT.setValue(finish);

              CUP$ScenariosParser$result = parser.getSymbolFactory().newSymbol("finish_element",14, ((java_cup.runtime.Symbol)CUP$ScenariosParser$stack.elementAt(CUP$ScenariosParser$top-6)), ((java_cup.runtime.Symbol)CUP$ScenariosParser$stack.peek()), RESULT);
            }
          return CUP$ScenariosParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // finish_elements ::= finish_element finish_elements 
            {
              GenericElement RESULT =null;
		int elementleft = ((java_cup.runtime.Symbol)CUP$ScenariosParser$stack.elementAt(CUP$ScenariosParser$top-1)).left;
		int elementright = ((java_cup.runtime.Symbol)CUP$ScenariosParser$stack.elementAt(CUP$ScenariosParser$top-1)).right;
		GenericAttr element = (GenericAttr)((java_cup.runtime.Symbol) CUP$ScenariosParser$stack.elementAt(CUP$ScenariosParser$top-1)).value;
		int elementsleft = ((java_cup.runtime.Symbol)CUP$ScenariosParser$stack.peek()).left;
		int elementsright = ((java_cup.runtime.Symbol)CUP$ScenariosParser$stack.peek()).right;
		GenericElement elements = (GenericElement)((java_cup.runtime.Symbol) CUP$ScenariosParser$stack.peek()).value;
		
                        RESULT = new GenericElement();
                        RESULT.addAttr(element);
                        RESULT.addAll(elements);
                    
              CUP$ScenariosParser$result = parser.getSymbolFactory().newSymbol("finish_elements",33, ((java_cup.runtime.Symbol)CUP$ScenariosParser$stack.elementAt(CUP$ScenariosParser$top-1)), ((java_cup.runtime.Symbol)CUP$ScenariosParser$stack.peek()), RESULT);
            }
          return CUP$ScenariosParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // finish_elements ::= finish_element 
            {
              GenericElement RESULT =null;
		int elementleft = ((java_cup.runtime.Symbol)CUP$ScenariosParser$stack.peek()).left;
		int elementright = ((java_cup.runtime.Symbol)CUP$ScenariosParser$stack.peek()).right;
		GenericAttr element = (GenericAttr)((java_cup.runtime.Symbol) CUP$ScenariosParser$stack.peek()).value;
		
                        RESULT = new GenericElement();
                        RESULT.addAttr(element);
                    
              CUP$ScenariosParser$result = parser.getSymbolFactory().newSymbol("finish_elements",33, ((java_cup.runtime.Symbol)CUP$ScenariosParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ScenariosParser$stack.peek()), RESULT);
            }
          return CUP$ScenariosParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // finish ::= INIT_FINISH finish_elements END_FINISH 
            {
              GenericElement RESULT =null;
		int elementsleft = ((java_cup.runtime.Symbol)CUP$ScenariosParser$stack.elementAt(CUP$ScenariosParser$top-1)).left;
		int elementsright = ((java_cup.runtime.Symbol)CUP$ScenariosParser$stack.elementAt(CUP$ScenariosParser$top-1)).right;
		GenericElement elements = (GenericElement)((java_cup.runtime.Symbol) CUP$ScenariosParser$stack.elementAt(CUP$ScenariosParser$top-1)).value;
		
    RESULT = elements;

              CUP$ScenariosParser$result = parser.getSymbolFactory().newSymbol("finish",32, ((java_cup.runtime.Symbol)CUP$ScenariosParser$stack.elementAt(CUP$ScenariosParser$top-2)), ((java_cup.runtime.Symbol)CUP$ScenariosParser$stack.peek()), RESULT);
            }
          return CUP$ScenariosParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // bonus_element ::= ID O_PAREN INT COMMA INT C_PAREN SEMICOLON 
            {
              GenericAttr RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$ScenariosParser$stack.elementAt(CUP$ScenariosParser$top-6)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$ScenariosParser$stack.elementAt(CUP$ScenariosParser$top-6)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$ScenariosParser$stack.elementAt(CUP$ScenariosParser$top-6)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$ScenariosParser$stack.elementAt(CUP$ScenariosParser$top-4)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$ScenariosParser$stack.elementAt(CUP$ScenariosParser$top-4)).right;
		Integer x = (Integer)((java_cup.runtime.Symbol) CUP$ScenariosParser$stack.elementAt(CUP$ScenariosParser$top-4)).value;
		int yleft = ((java_cup.runtime.Symbol)CUP$ScenariosParser$stack.elementAt(CUP$ScenariosParser$top-2)).left;
		int yright = ((java_cup.runtime.Symbol)CUP$ScenariosParser$stack.elementAt(CUP$ScenariosParser$top-2)).right;
		Integer y = (Integer)((java_cup.runtime.Symbol) CUP$ScenariosParser$stack.elementAt(CUP$ScenariosParser$top-2)).value;
		
    RESULT = new GenericAttr<GenericElement>();
    RESULT.setType("bonus"); // unnecessary, I'm boring

    GenericElement bonus = new GenericElement();

    GenericAttr<String> n = new GenericAttr<>();
    n.setType("name");
    n.setValue(name);
    bonus.addAttr(n);

    GenericAttr<Integer> tmpY = new GenericAttr<>();
    tmpY.setType("y");
    tmpY.setValue(y);
    bonus.addAttr(tmpY);

    GenericAttr<Integer> tmpX = new GenericAttr<>();
    tmpX.setType("x");
    tmpX.setValue(x);
    bonus.addAttr(tmpX);

    RESULT.setValue(bonus);

              CUP$ScenariosParser$result = parser.getSymbolFactory().newSymbol("bonus_element",13, ((java_cup.runtime.Symbol)CUP$ScenariosParser$stack.elementAt(CUP$ScenariosParser$top-6)), ((java_cup.runtime.Symbol)CUP$ScenariosParser$stack.peek()), RESULT);
            }
          return CUP$ScenariosParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // bonus_elements ::= bonus_element bonus_elements 
            {
              GenericElement RESULT =null;
		int elementleft = ((java_cup.runtime.Symbol)CUP$ScenariosParser$stack.elementAt(CUP$ScenariosParser$top-1)).left;
		int elementright = ((java_cup.runtime.Symbol)CUP$ScenariosParser$stack.elementAt(CUP$ScenariosParser$top-1)).right;
		GenericAttr element = (GenericAttr)((java_cup.runtime.Symbol) CUP$ScenariosParser$stack.elementAt(CUP$ScenariosParser$top-1)).value;
		int elementsleft = ((java_cup.runtime.Symbol)CUP$ScenariosParser$stack.peek()).left;
		int elementsright = ((java_cup.runtime.Symbol)CUP$ScenariosParser$stack.peek()).right;
		GenericElement elements = (GenericElement)((java_cup.runtime.Symbol) CUP$ScenariosParser$stack.peek()).value;
		
                    RESULT = new GenericElement();
                    RESULT.addAttr(element);
                    RESULT.addAll(elements);
                
              CUP$ScenariosParser$result = parser.getSymbolFactory().newSymbol("bonus_elements",31, ((java_cup.runtime.Symbol)CUP$ScenariosParser$stack.elementAt(CUP$ScenariosParser$top-1)), ((java_cup.runtime.Symbol)CUP$ScenariosParser$stack.peek()), RESULT);
            }
          return CUP$ScenariosParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // bonus_elements ::= bonus_element 
            {
              GenericElement RESULT =null;
		int elementleft = ((java_cup.runtime.Symbol)CUP$ScenariosParser$stack.peek()).left;
		int elementright = ((java_cup.runtime.Symbol)CUP$ScenariosParser$stack.peek()).right;
		GenericAttr element = (GenericAttr)((java_cup.runtime.Symbol) CUP$ScenariosParser$stack.peek()).value;
		
                    RESULT = new GenericElement();
                    RESULT.addAttr(element);
                
              CUP$ScenariosParser$result = parser.getSymbolFactory().newSymbol("bonus_elements",31, ((java_cup.runtime.Symbol)CUP$ScenariosParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ScenariosParser$stack.peek()), RESULT);
            }
          return CUP$ScenariosParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // extras_bonus ::= INIT_BONUS bonus_elements END_BONUS 
            {
              GenericElement RESULT =null;
		int elementsleft = ((java_cup.runtime.Symbol)CUP$ScenariosParser$stack.elementAt(CUP$ScenariosParser$top-1)).left;
		int elementsright = ((java_cup.runtime.Symbol)CUP$ScenariosParser$stack.elementAt(CUP$ScenariosParser$top-1)).right;
		GenericElement elements = (GenericElement)((java_cup.runtime.Symbol) CUP$ScenariosParser$stack.elementAt(CUP$ScenariosParser$top-1)).value;
		
    RESULT = elements;

              CUP$ScenariosParser$result = parser.getSymbolFactory().newSymbol("extras_bonus",30, ((java_cup.runtime.Symbol)CUP$ScenariosParser$stack.elementAt(CUP$ScenariosParser$top-2)), ((java_cup.runtime.Symbol)CUP$ScenariosParser$stack.peek()), RESULT);
            }
          return CUP$ScenariosParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // weapons_element ::= ID O_PAREN INT COMMA INT C_PAREN SEMICOLON 
            {
              GenericAttr RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$ScenariosParser$stack.elementAt(CUP$ScenariosParser$top-6)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$ScenariosParser$stack.elementAt(CUP$ScenariosParser$top-6)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$ScenariosParser$stack.elementAt(CUP$ScenariosParser$top-6)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$ScenariosParser$stack.elementAt(CUP$ScenariosParser$top-4)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$ScenariosParser$stack.elementAt(CUP$ScenariosParser$top-4)).right;
		Integer x = (Integer)((java_cup.runtime.Symbol) CUP$ScenariosParser$stack.elementAt(CUP$ScenariosParser$top-4)).value;
		int yleft = ((java_cup.runtime.Symbol)CUP$ScenariosParser$stack.elementAt(CUP$ScenariosParser$top-2)).left;
		int yright = ((java_cup.runtime.Symbol)CUP$ScenariosParser$stack.elementAt(CUP$ScenariosParser$top-2)).right;
		Integer y = (Integer)((java_cup.runtime.Symbol) CUP$ScenariosParser$stack.elementAt(CUP$ScenariosParser$top-2)).value;
		
    RESULT = new GenericAttr<GenericElement>();
    RESULT.setType("weapon"); // unnecessary, I'm boring

    GenericElement weapon = new GenericElement();

    GenericAttr<String> n = new GenericAttr<>();
    n.setType("name");
    n.setValue(name);
    weapon.addAttr(n);

    GenericAttr<Integer> tmpY = new GenericAttr<>();
    tmpY.setType("y");
    tmpY.setValue(y);
    weapon.addAttr(tmpY);

    GenericAttr<Integer> tmpX = new GenericAttr<>();
    tmpX.setType("x");
    tmpX.setValue(x);
    weapon.addAttr(tmpX);

    RESULT.setValue(weapon);

              CUP$ScenariosParser$result = parser.getSymbolFactory().newSymbol("weapons_element",12, ((java_cup.runtime.Symbol)CUP$ScenariosParser$stack.elementAt(CUP$ScenariosParser$top-6)), ((java_cup.runtime.Symbol)CUP$ScenariosParser$stack.peek()), RESULT);
            }
          return CUP$ScenariosParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // weapons_elements ::= weapons_element weapons_elements 
            {
              GenericElement RESULT =null;
		int elementleft = ((java_cup.runtime.Symbol)CUP$ScenariosParser$stack.elementAt(CUP$ScenariosParser$top-1)).left;
		int elementright = ((java_cup.runtime.Symbol)CUP$ScenariosParser$stack.elementAt(CUP$ScenariosParser$top-1)).right;
		GenericAttr element = (GenericAttr)((java_cup.runtime.Symbol) CUP$ScenariosParser$stack.elementAt(CUP$ScenariosParser$top-1)).value;
		int elementsleft = ((java_cup.runtime.Symbol)CUP$ScenariosParser$stack.peek()).left;
		int elementsright = ((java_cup.runtime.Symbol)CUP$ScenariosParser$stack.peek()).right;
		GenericElement elements = (GenericElement)((java_cup.runtime.Symbol) CUP$ScenariosParser$stack.peek()).value;
		
                        RESULT = new GenericElement();
                        RESULT.addAttr(element);
                        RESULT.addAll(elements);
                    
              CUP$ScenariosParser$result = parser.getSymbolFactory().newSymbol("weapons_elements",29, ((java_cup.runtime.Symbol)CUP$ScenariosParser$stack.elementAt(CUP$ScenariosParser$top-1)), ((java_cup.runtime.Symbol)CUP$ScenariosParser$stack.peek()), RESULT);
            }
          return CUP$ScenariosParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // weapons_elements ::= weapons_element 
            {
              GenericElement RESULT =null;
		int elementleft = ((java_cup.runtime.Symbol)CUP$ScenariosParser$stack.peek()).left;
		int elementright = ((java_cup.runtime.Symbol)CUP$ScenariosParser$stack.peek()).right;
		GenericAttr element = (GenericAttr)((java_cup.runtime.Symbol) CUP$ScenariosParser$stack.peek()).value;
		
                        RESULT = new GenericElement();
                        RESULT.addAttr(element);
                    
              CUP$ScenariosParser$result = parser.getSymbolFactory().newSymbol("weapons_elements",29, ((java_cup.runtime.Symbol)CUP$ScenariosParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ScenariosParser$stack.peek()), RESULT);
            }
          return CUP$ScenariosParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // extras_weapons ::= INIT_WEAPONS weapons_elements END_WEAPONS 
            {
              GenericElement RESULT =null;
		int elementsleft = ((java_cup.runtime.Symbol)CUP$ScenariosParser$stack.elementAt(CUP$ScenariosParser$top-1)).left;
		int elementsright = ((java_cup.runtime.Symbol)CUP$ScenariosParser$stack.elementAt(CUP$ScenariosParser$top-1)).right;
		GenericElement elements = (GenericElement)((java_cup.runtime.Symbol) CUP$ScenariosParser$stack.elementAt(CUP$ScenariosParser$top-1)).value;
		
    RESULT = elements;

              CUP$ScenariosParser$result = parser.getSymbolFactory().newSymbol("extras_weapons",28, ((java_cup.runtime.Symbol)CUP$ScenariosParser$stack.elementAt(CUP$ScenariosParser$top-2)), ((java_cup.runtime.Symbol)CUP$ScenariosParser$stack.peek()), RESULT);
            }
          return CUP$ScenariosParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // extras_element ::= extras_bonus 
            {
              GenericAttr RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$ScenariosParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$ScenariosParser$stack.peek()).right;
		GenericElement b = (GenericElement)((java_cup.runtime.Symbol) CUP$ScenariosParser$stack.peek()).value;
		
                        RESULT = new GenericAttr<GenericElement>();
                        RESULT.setType("bonus");
                        RESULT.setValue(b);
                    
              CUP$ScenariosParser$result = parser.getSymbolFactory().newSymbol("extras_element",11, ((java_cup.runtime.Symbol)CUP$ScenariosParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ScenariosParser$stack.peek()), RESULT);
            }
          return CUP$ScenariosParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // extras_element ::= extras_weapons 
            {
              GenericAttr RESULT =null;
		int wleft = ((java_cup.runtime.Symbol)CUP$ScenariosParser$stack.peek()).left;
		int wright = ((java_cup.runtime.Symbol)CUP$ScenariosParser$stack.peek()).right;
		GenericElement w = (GenericElement)((java_cup.runtime.Symbol) CUP$ScenariosParser$stack.peek()).value;
		
                        RESULT = new GenericAttr<GenericElement>();
                        RESULT.setType("weapons");
                        RESULT.setValue(w);
                    
              CUP$ScenariosParser$result = parser.getSymbolFactory().newSymbol("extras_element",11, ((java_cup.runtime.Symbol)CUP$ScenariosParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ScenariosParser$stack.peek()), RESULT);
            }
          return CUP$ScenariosParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // extras_elements ::= extras_element extras_elements 
            {
              GenericElement RESULT =null;
		int elementleft = ((java_cup.runtime.Symbol)CUP$ScenariosParser$stack.elementAt(CUP$ScenariosParser$top-1)).left;
		int elementright = ((java_cup.runtime.Symbol)CUP$ScenariosParser$stack.elementAt(CUP$ScenariosParser$top-1)).right;
		GenericAttr element = (GenericAttr)((java_cup.runtime.Symbol) CUP$ScenariosParser$stack.elementAt(CUP$ScenariosParser$top-1)).value;
		int elementsleft = ((java_cup.runtime.Symbol)CUP$ScenariosParser$stack.peek()).left;
		int elementsright = ((java_cup.runtime.Symbol)CUP$ScenariosParser$stack.peek()).right;
		GenericElement elements = (GenericElement)((java_cup.runtime.Symbol) CUP$ScenariosParser$stack.peek()).value;
		
                        RESULT = new GenericElement();
                        RESULT.addAttr(element);
                        RESULT.addAll(elements);
                    
              CUP$ScenariosParser$result = parser.getSymbolFactory().newSymbol("extras_elements",27, ((java_cup.runtime.Symbol)CUP$ScenariosParser$stack.elementAt(CUP$ScenariosParser$top-1)), ((java_cup.runtime.Symbol)CUP$ScenariosParser$stack.peek()), RESULT);
            }
          return CUP$ScenariosParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // extras_elements ::= extras_element 
            {
              GenericElement RESULT =null;
		int elementleft = ((java_cup.runtime.Symbol)CUP$ScenariosParser$stack.peek()).left;
		int elementright = ((java_cup.runtime.Symbol)CUP$ScenariosParser$stack.peek()).right;
		GenericAttr element = (GenericAttr)((java_cup.runtime.Symbol) CUP$ScenariosParser$stack.peek()).value;
		
                        RESULT = new GenericElement();
                        RESULT.addAttr(element);
                    
              CUP$ScenariosParser$result = parser.getSymbolFactory().newSymbol("extras_elements",27, ((java_cup.runtime.Symbol)CUP$ScenariosParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ScenariosParser$stack.peek()), RESULT);
            }
          return CUP$ScenariosParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // extras ::= INIT_EXTRAS extras_elements END_EXTRAS 
            {
              GenericElement RESULT =null;
		int elementsleft = ((java_cup.runtime.Symbol)CUP$ScenariosParser$stack.elementAt(CUP$ScenariosParser$top-1)).left;
		int elementsright = ((java_cup.runtime.Symbol)CUP$ScenariosParser$stack.elementAt(CUP$ScenariosParser$top-1)).right;
		GenericElement elements = (GenericElement)((java_cup.runtime.Symbol) CUP$ScenariosParser$stack.elementAt(CUP$ScenariosParser$top-1)).value;
		
    RESULT =    elements;

              CUP$ScenariosParser$result = parser.getSymbolFactory().newSymbol("extras",26, ((java_cup.runtime.Symbol)CUP$ScenariosParser$stack.elementAt(CUP$ScenariosParser$top-2)), ((java_cup.runtime.Symbol)CUP$ScenariosParser$stack.peek()), RESULT);
            }
          return CUP$ScenariosParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // floors_element ::= ID O_PAREN int_range COMMA int_range C_PAREN SEMICOLON 
            {
              GenericAttr RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$ScenariosParser$stack.elementAt(CUP$ScenariosParser$top-6)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$ScenariosParser$stack.elementAt(CUP$ScenariosParser$top-6)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$ScenariosParser$stack.elementAt(CUP$ScenariosParser$top-6)).value;
		int rangeXleft = ((java_cup.runtime.Symbol)CUP$ScenariosParser$stack.elementAt(CUP$ScenariosParser$top-4)).left;
		int rangeXright = ((java_cup.runtime.Symbol)CUP$ScenariosParser$stack.elementAt(CUP$ScenariosParser$top-4)).right;
		Point rangeX = (Point)((java_cup.runtime.Symbol) CUP$ScenariosParser$stack.elementAt(CUP$ScenariosParser$top-4)).value;
		int rangeYleft = ((java_cup.runtime.Symbol)CUP$ScenariosParser$stack.elementAt(CUP$ScenariosParser$top-2)).left;
		int rangeYright = ((java_cup.runtime.Symbol)CUP$ScenariosParser$stack.elementAt(CUP$ScenariosParser$top-2)).right;
		Point rangeY = (Point)((java_cup.runtime.Symbol) CUP$ScenariosParser$stack.elementAt(CUP$ScenariosParser$top-2)).value;
		
    RESULT = new GenericAttr<GenericElement>();
    RESULT.setType("floor");

    GenericElement floor = new GenericElement();

    // set the name
    GenericAttr<String> n = new GenericAttr<>();
    n.setType("name");
    n.setValue(name);
    floor.addAttr(n);

    // set the range
    GenericAttr<Point2D> p = new GenericAttr<>();
    p.setType("range");
    p.setValue(new Point2D((int)rangeX.getX(), (int)rangeX.getY(), (int)rangeY.getX(), (int)rangeY.getY()));
    floor.addAttr(p);

    RESULT.setValue(floor);

              CUP$ScenariosParser$result = parser.getSymbolFactory().newSymbol("floors_element",10, ((java_cup.runtime.Symbol)CUP$ScenariosParser$stack.elementAt(CUP$ScenariosParser$top-6)), ((java_cup.runtime.Symbol)CUP$ScenariosParser$stack.peek()), RESULT);
            }
          return CUP$ScenariosParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // floors_elements ::= floors_element floors_elements 
            {
              GenericElement RESULT =null;
		int elementleft = ((java_cup.runtime.Symbol)CUP$ScenariosParser$stack.elementAt(CUP$ScenariosParser$top-1)).left;
		int elementright = ((java_cup.runtime.Symbol)CUP$ScenariosParser$stack.elementAt(CUP$ScenariosParser$top-1)).right;
		GenericAttr element = (GenericAttr)((java_cup.runtime.Symbol) CUP$ScenariosParser$stack.elementAt(CUP$ScenariosParser$top-1)).value;
		int elementsleft = ((java_cup.runtime.Symbol)CUP$ScenariosParser$stack.peek()).left;
		int elementsright = ((java_cup.runtime.Symbol)CUP$ScenariosParser$stack.peek()).right;
		GenericElement elements = (GenericElement)((java_cup.runtime.Symbol) CUP$ScenariosParser$stack.peek()).value;
		
                        RESULT = new GenericElement();
                        RESULT.addAttr(element);
                        RESULT.addAll(elements);
                    
              CUP$ScenariosParser$result = parser.getSymbolFactory().newSymbol("floors_elements",25, ((java_cup.runtime.Symbol)CUP$ScenariosParser$stack.elementAt(CUP$ScenariosParser$top-1)), ((java_cup.runtime.Symbol)CUP$ScenariosParser$stack.peek()), RESULT);
            }
          return CUP$ScenariosParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // floors_elements ::= floors_element 
            {
              GenericElement RESULT =null;
		int elementleft = ((java_cup.runtime.Symbol)CUP$ScenariosParser$stack.peek()).left;
		int elementright = ((java_cup.runtime.Symbol)CUP$ScenariosParser$stack.peek()).right;
		GenericAttr element = (GenericAttr)((java_cup.runtime.Symbol) CUP$ScenariosParser$stack.peek()).value;
		
                        RESULT = new GenericElement();
                        RESULT.addAttr(element);
                    
              CUP$ScenariosParser$result = parser.getSymbolFactory().newSymbol("floors_elements",25, ((java_cup.runtime.Symbol)CUP$ScenariosParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ScenariosParser$stack.peek()), RESULT);
            }
          return CUP$ScenariosParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // floors ::= INIT_FLOOR floors_elements END_FLOOR 
            {
              GenericElement RESULT =null;
		int elementsleft = ((java_cup.runtime.Symbol)CUP$ScenariosParser$stack.elementAt(CUP$ScenariosParser$top-1)).left;
		int elementsright = ((java_cup.runtime.Symbol)CUP$ScenariosParser$stack.elementAt(CUP$ScenariosParser$top-1)).right;
		GenericElement elements = (GenericElement)((java_cup.runtime.Symbol) CUP$ScenariosParser$stack.elementAt(CUP$ScenariosParser$top-1)).value;
		
    RESULT = elements;

              CUP$ScenariosParser$result = parser.getSymbolFactory().newSymbol("floors",24, ((java_cup.runtime.Symbol)CUP$ScenariosParser$stack.elementAt(CUP$ScenariosParser$top-2)), ((java_cup.runtime.Symbol)CUP$ScenariosParser$stack.peek()), RESULT);
            }
          return CUP$ScenariosParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // walls_element ::= ID O_PAREN int_range COMMA int_range C_PAREN SEMICOLON 
            {
              GenericAttr RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$ScenariosParser$stack.elementAt(CUP$ScenariosParser$top-6)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$ScenariosParser$stack.elementAt(CUP$ScenariosParser$top-6)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$ScenariosParser$stack.elementAt(CUP$ScenariosParser$top-6)).value;
		int rangeXleft = ((java_cup.runtime.Symbol)CUP$ScenariosParser$stack.elementAt(CUP$ScenariosParser$top-4)).left;
		int rangeXright = ((java_cup.runtime.Symbol)CUP$ScenariosParser$stack.elementAt(CUP$ScenariosParser$top-4)).right;
		Point rangeX = (Point)((java_cup.runtime.Symbol) CUP$ScenariosParser$stack.elementAt(CUP$ScenariosParser$top-4)).value;
		int rangeYleft = ((java_cup.runtime.Symbol)CUP$ScenariosParser$stack.elementAt(CUP$ScenariosParser$top-2)).left;
		int rangeYright = ((java_cup.runtime.Symbol)CUP$ScenariosParser$stack.elementAt(CUP$ScenariosParser$top-2)).right;
		Point rangeY = (Point)((java_cup.runtime.Symbol) CUP$ScenariosParser$stack.elementAt(CUP$ScenariosParser$top-2)).value;
		
    RESULT = new GenericAttr<GenericElement>();
    RESULT.setType("wall");

    GenericElement wall = new GenericElement();

    // set the name
    GenericAttr<String> n = new GenericAttr<>();
    n.setType("name");
    n.setValue(name);
    wall.addAttr(n);

    // set the range
    GenericAttr<Point2D> p = new GenericAttr<>();
    p.setType("range");
    p.setValue(new Point2D((int)rangeX.getX(), (int)rangeX.getY(), (int)rangeY.getX(), (int)rangeY.getY()));
    wall.addAttr(p);

    RESULT.setValue(wall);


              CUP$ScenariosParser$result = parser.getSymbolFactory().newSymbol("walls_element",9, ((java_cup.runtime.Symbol)CUP$ScenariosParser$stack.elementAt(CUP$ScenariosParser$top-6)), ((java_cup.runtime.Symbol)CUP$ScenariosParser$stack.peek()), RESULT);
            }
          return CUP$ScenariosParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // walls_elements ::= walls_element walls_elements 
            {
              GenericElement RESULT =null;
		int elementleft = ((java_cup.runtime.Symbol)CUP$ScenariosParser$stack.elementAt(CUP$ScenariosParser$top-1)).left;
		int elementright = ((java_cup.runtime.Symbol)CUP$ScenariosParser$stack.elementAt(CUP$ScenariosParser$top-1)).right;
		GenericAttr element = (GenericAttr)((java_cup.runtime.Symbol) CUP$ScenariosParser$stack.elementAt(CUP$ScenariosParser$top-1)).value;
		int elementsleft = ((java_cup.runtime.Symbol)CUP$ScenariosParser$stack.peek()).left;
		int elementsright = ((java_cup.runtime.Symbol)CUP$ScenariosParser$stack.peek()).right;
		GenericElement elements = (GenericElement)((java_cup.runtime.Symbol) CUP$ScenariosParser$stack.peek()).value;
		
                    RESULT = new GenericElement();
                    RESULT.addAttr(element);
                    RESULT.addAll(elements);
                
              CUP$ScenariosParser$result = parser.getSymbolFactory().newSymbol("walls_elements",23, ((java_cup.runtime.Symbol)CUP$ScenariosParser$stack.elementAt(CUP$ScenariosParser$top-1)), ((java_cup.runtime.Symbol)CUP$ScenariosParser$stack.peek()), RESULT);
            }
          return CUP$ScenariosParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // walls_elements ::= walls_element 
            {
              GenericElement RESULT =null;
		int elementleft = ((java_cup.runtime.Symbol)CUP$ScenariosParser$stack.peek()).left;
		int elementright = ((java_cup.runtime.Symbol)CUP$ScenariosParser$stack.peek()).right;
		GenericAttr element = (GenericAttr)((java_cup.runtime.Symbol) CUP$ScenariosParser$stack.peek()).value;
		
                    RESULT = new GenericElement();
                    RESULT.addAttr(element);
                
              CUP$ScenariosParser$result = parser.getSymbolFactory().newSymbol("walls_elements",23, ((java_cup.runtime.Symbol)CUP$ScenariosParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ScenariosParser$stack.peek()), RESULT);
            }
          return CUP$ScenariosParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // walls ::= INIT_WALLS walls_elements END_WALLS 
            {
              GenericElement RESULT =null;
		int elementsleft = ((java_cup.runtime.Symbol)CUP$ScenariosParser$stack.elementAt(CUP$ScenariosParser$top-1)).left;
		int elementsright = ((java_cup.runtime.Symbol)CUP$ScenariosParser$stack.elementAt(CUP$ScenariosParser$top-1)).right;
		GenericElement elements = (GenericElement)((java_cup.runtime.Symbol) CUP$ScenariosParser$stack.elementAt(CUP$ScenariosParser$top-1)).value;
		
    RESULT = elements;

              CUP$ScenariosParser$result = parser.getSymbolFactory().newSymbol("walls",22, ((java_cup.runtime.Symbol)CUP$ScenariosParser$stack.elementAt(CUP$ScenariosParser$top-2)), ((java_cup.runtime.Symbol)CUP$ScenariosParser$stack.peek()), RESULT);
            }
          return CUP$ScenariosParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // villains_element ::= ID O_PAREN INT COMMA INT C_PAREN SEMICOLON 
            {
              GenericAttr RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$ScenariosParser$stack.elementAt(CUP$ScenariosParser$top-6)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$ScenariosParser$stack.elementAt(CUP$ScenariosParser$top-6)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$ScenariosParser$stack.elementAt(CUP$ScenariosParser$top-6)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$ScenariosParser$stack.elementAt(CUP$ScenariosParser$top-4)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$ScenariosParser$stack.elementAt(CUP$ScenariosParser$top-4)).right;
		Integer x = (Integer)((java_cup.runtime.Symbol) CUP$ScenariosParser$stack.elementAt(CUP$ScenariosParser$top-4)).value;
		int yleft = ((java_cup.runtime.Symbol)CUP$ScenariosParser$stack.elementAt(CUP$ScenariosParser$top-2)).left;
		int yright = ((java_cup.runtime.Symbol)CUP$ScenariosParser$stack.elementAt(CUP$ScenariosParser$top-2)).right;
		Integer y = (Integer)((java_cup.runtime.Symbol) CUP$ScenariosParser$stack.elementAt(CUP$ScenariosParser$top-2)).value;
		
    RESULT = new GenericAttr<GenericElement>();
    RESULT.setType("villain"); // unnecessary, I'm boring

    GenericElement villain = new GenericElement();

    GenericAttr<String> n = new GenericAttr<>();
    n.setType("name");
    n.setValue(name);
    villain.addAttr(n);

    GenericAttr<Integer> tmpY = new GenericAttr<>();
    tmpY.setType("y");
    tmpY.setValue(y);
    villain.addAttr(tmpY);

    GenericAttr<Integer> tmpX = new GenericAttr<>();
    tmpX.setType("x");
    tmpX.setValue(x);
    villain.addAttr(tmpX);

    RESULT.setValue(villain);


              CUP$ScenariosParser$result = parser.getSymbolFactory().newSymbol("villains_element",8, ((java_cup.runtime.Symbol)CUP$ScenariosParser$stack.elementAt(CUP$ScenariosParser$top-6)), ((java_cup.runtime.Symbol)CUP$ScenariosParser$stack.peek()), RESULT);
            }
          return CUP$ScenariosParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // villains_elements ::= villains_element villains_elements 
            {
              GenericElement RESULT =null;
		int elementleft = ((java_cup.runtime.Symbol)CUP$ScenariosParser$stack.elementAt(CUP$ScenariosParser$top-1)).left;
		int elementright = ((java_cup.runtime.Symbol)CUP$ScenariosParser$stack.elementAt(CUP$ScenariosParser$top-1)).right;
		GenericAttr element = (GenericAttr)((java_cup.runtime.Symbol) CUP$ScenariosParser$stack.elementAt(CUP$ScenariosParser$top-1)).value;
		int elementsleft = ((java_cup.runtime.Symbol)CUP$ScenariosParser$stack.peek()).left;
		int elementsright = ((java_cup.runtime.Symbol)CUP$ScenariosParser$stack.peek()).right;
		GenericElement elements = (GenericElement)((java_cup.runtime.Symbol) CUP$ScenariosParser$stack.peek()).value;
		
                        RESULT = new GenericElement();
                        RESULT.addAttr(element);
                        RESULT.addAll(elements);
                    
              CUP$ScenariosParser$result = parser.getSymbolFactory().newSymbol("villains_elements",21, ((java_cup.runtime.Symbol)CUP$ScenariosParser$stack.elementAt(CUP$ScenariosParser$top-1)), ((java_cup.runtime.Symbol)CUP$ScenariosParser$stack.peek()), RESULT);
            }
          return CUP$ScenariosParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // villains_elements ::= villains_element 
            {
              GenericElement RESULT =null;
		int elementleft = ((java_cup.runtime.Symbol)CUP$ScenariosParser$stack.peek()).left;
		int elementright = ((java_cup.runtime.Symbol)CUP$ScenariosParser$stack.peek()).right;
		GenericAttr element = (GenericAttr)((java_cup.runtime.Symbol) CUP$ScenariosParser$stack.peek()).value;
		
                        RESULT = new GenericElement();
                        RESULT.addAttr(element);
                    
              CUP$ScenariosParser$result = parser.getSymbolFactory().newSymbol("villains_elements",21, ((java_cup.runtime.Symbol)CUP$ScenariosParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ScenariosParser$stack.peek()), RESULT);
            }
          return CUP$ScenariosParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // villains ::= INIT_VILLAINS villains_elements END_VILLAINS 
            {
              GenericElement RESULT =null;
		int elementsleft = ((java_cup.runtime.Symbol)CUP$ScenariosParser$stack.elementAt(CUP$ScenariosParser$top-1)).left;
		int elementsright = ((java_cup.runtime.Symbol)CUP$ScenariosParser$stack.elementAt(CUP$ScenariosParser$top-1)).right;
		GenericElement elements = (GenericElement)((java_cup.runtime.Symbol) CUP$ScenariosParser$stack.elementAt(CUP$ScenariosParser$top-1)).value;
		
    RESULT = elements;

              CUP$ScenariosParser$result = parser.getSymbolFactory().newSymbol("villains",20, ((java_cup.runtime.Symbol)CUP$ScenariosParser$stack.elementAt(CUP$ScenariosParser$top-2)), ((java_cup.runtime.Symbol)CUP$ScenariosParser$stack.peek()), RESULT);
            }
          return CUP$ScenariosParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // heroes ::= INIT_HEROES ID O_PAREN INT COMMA INT C_PAREN SEMICOLON END_HEROES 
            {
              GenericElement RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$ScenariosParser$stack.elementAt(CUP$ScenariosParser$top-7)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$ScenariosParser$stack.elementAt(CUP$ScenariosParser$top-7)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$ScenariosParser$stack.elementAt(CUP$ScenariosParser$top-7)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$ScenariosParser$stack.elementAt(CUP$ScenariosParser$top-5)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$ScenariosParser$stack.elementAt(CUP$ScenariosParser$top-5)).right;
		Integer x = (Integer)((java_cup.runtime.Symbol) CUP$ScenariosParser$stack.elementAt(CUP$ScenariosParser$top-5)).value;
		int yleft = ((java_cup.runtime.Symbol)CUP$ScenariosParser$stack.elementAt(CUP$ScenariosParser$top-3)).left;
		int yright = ((java_cup.runtime.Symbol)CUP$ScenariosParser$stack.elementAt(CUP$ScenariosParser$top-3)).right;
		Integer y = (Integer)((java_cup.runtime.Symbol) CUP$ScenariosParser$stack.elementAt(CUP$ScenariosParser$top-3)).value;
		
    RESULT = new GenericElement();
    GenericAttr<String> n = new GenericAttr<>();
    n.setType("name");
    n.setValue(name);
    RESULT.addAttr(n);

    GenericAttr<Integer> tmpY = new GenericAttr<>();
    tmpY.setType("y");
    tmpY.setValue(y);
    RESULT.addAttr(tmpY);

    GenericAttr<Integer> tmpX = new GenericAttr<>();
    tmpX.setType("x");
    tmpX.setValue(x);
    RESULT.addAttr(tmpX);

              CUP$ScenariosParser$result = parser.getSymbolFactory().newSymbol("heroes",19, ((java_cup.runtime.Symbol)CUP$ScenariosParser$stack.elementAt(CUP$ScenariosParser$top-8)), ((java_cup.runtime.Symbol)CUP$ScenariosParser$stack.peek()), RESULT);
            }
          return CUP$ScenariosParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // characters_element ::= villains 
            {
              GenericAttr RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$ScenariosParser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$ScenariosParser$stack.peek()).right;
		GenericElement v = (GenericElement)((java_cup.runtime.Symbol) CUP$ScenariosParser$stack.peek()).value;
		
                            RESULT = new GenericAttr<GenericElement>();
                            RESULT.setType("villains");
                            RESULT.setValue(v);
                        
              CUP$ScenariosParser$result = parser.getSymbolFactory().newSymbol("characters_element",7, ((java_cup.runtime.Symbol)CUP$ScenariosParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ScenariosParser$stack.peek()), RESULT);
            }
          return CUP$ScenariosParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // characters_element ::= heroes 
            {
              GenericAttr RESULT =null;
		int hleft = ((java_cup.runtime.Symbol)CUP$ScenariosParser$stack.peek()).left;
		int hright = ((java_cup.runtime.Symbol)CUP$ScenariosParser$stack.peek()).right;
		GenericElement h = (GenericElement)((java_cup.runtime.Symbol) CUP$ScenariosParser$stack.peek()).value;
		
                            RESULT = new GenericAttr<GenericElement>();
                            RESULT.setType("hero");
                            RESULT.setValue(h);
                        
              CUP$ScenariosParser$result = parser.getSymbolFactory().newSymbol("characters_element",7, ((java_cup.runtime.Symbol)CUP$ScenariosParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ScenariosParser$stack.peek()), RESULT);
            }
          return CUP$ScenariosParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // characters_elements ::= characters_element characters_elements 
            {
              GenericElement RESULT =null;
		int elementleft = ((java_cup.runtime.Symbol)CUP$ScenariosParser$stack.elementAt(CUP$ScenariosParser$top-1)).left;
		int elementright = ((java_cup.runtime.Symbol)CUP$ScenariosParser$stack.elementAt(CUP$ScenariosParser$top-1)).right;
		GenericAttr element = (GenericAttr)((java_cup.runtime.Symbol) CUP$ScenariosParser$stack.elementAt(CUP$ScenariosParser$top-1)).value;
		int elementsleft = ((java_cup.runtime.Symbol)CUP$ScenariosParser$stack.peek()).left;
		int elementsright = ((java_cup.runtime.Symbol)CUP$ScenariosParser$stack.peek()).right;
		GenericElement elements = (GenericElement)((java_cup.runtime.Symbol) CUP$ScenariosParser$stack.peek()).value;
		
                            RESULT = new GenericElement();
                            RESULT.addAttr(element);
                            RESULT.addAll(elements);
                        
              CUP$ScenariosParser$result = parser.getSymbolFactory().newSymbol("characters_elements",18, ((java_cup.runtime.Symbol)CUP$ScenariosParser$stack.elementAt(CUP$ScenariosParser$top-1)), ((java_cup.runtime.Symbol)CUP$ScenariosParser$stack.peek()), RESULT);
            }
          return CUP$ScenariosParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // characters_elements ::= characters_element 
            {
              GenericElement RESULT =null;
		int elementleft = ((java_cup.runtime.Symbol)CUP$ScenariosParser$stack.peek()).left;
		int elementright = ((java_cup.runtime.Symbol)CUP$ScenariosParser$stack.peek()).right;
		GenericAttr element = (GenericAttr)((java_cup.runtime.Symbol) CUP$ScenariosParser$stack.peek()).value;
		
                            RESULT = new GenericElement();
                            RESULT.addAttr(element);
                        
              CUP$ScenariosParser$result = parser.getSymbolFactory().newSymbol("characters_elements",18, ((java_cup.runtime.Symbol)CUP$ScenariosParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ScenariosParser$stack.peek()), RESULT);
            }
          return CUP$ScenariosParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // characters ::= INIT_CHARACTERS characters_elements END_CHARACTERS 
            {
              GenericElement RESULT =null;
		int elementsleft = ((java_cup.runtime.Symbol)CUP$ScenariosParser$stack.elementAt(CUP$ScenariosParser$top-1)).left;
		int elementsright = ((java_cup.runtime.Symbol)CUP$ScenariosParser$stack.elementAt(CUP$ScenariosParser$top-1)).right;
		GenericElement elements = (GenericElement)((java_cup.runtime.Symbol) CUP$ScenariosParser$stack.elementAt(CUP$ScenariosParser$top-1)).value;
		
    RESULT = elements;

              CUP$ScenariosParser$result = parser.getSymbolFactory().newSymbol("characters",17, ((java_cup.runtime.Symbol)CUP$ScenariosParser$stack.elementAt(CUP$ScenariosParser$top-2)), ((java_cup.runtime.Symbol)CUP$ScenariosParser$stack.peek()), RESULT);
            }
          return CUP$ScenariosParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // scenario_element ::= finish 
            {
              GenericAttr RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$ScenariosParser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$ScenariosParser$stack.peek()).right;
		GenericElement f = (GenericElement)((java_cup.runtime.Symbol) CUP$ScenariosParser$stack.peek()).value;
		
                        RESULT = new GenericAttr<GenericElement>();
                        RESULT.setType("finish");
                        RESULT.setValue(f);
                    
              CUP$ScenariosParser$result = parser.getSymbolFactory().newSymbol("scenario_element",5, ((java_cup.runtime.Symbol)CUP$ScenariosParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ScenariosParser$stack.peek()), RESULT);
            }
          return CUP$ScenariosParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // scenario_element ::= extras 
            {
              GenericAttr RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ScenariosParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ScenariosParser$stack.peek()).right;
		GenericElement e = (GenericElement)((java_cup.runtime.Symbol) CUP$ScenariosParser$stack.peek()).value;
		
                        RESULT = new GenericAttr<GenericElement>();
                        RESULT.setType("extras");
                        RESULT.setValue(e);
                    
              CUP$ScenariosParser$result = parser.getSymbolFactory().newSymbol("scenario_element",5, ((java_cup.runtime.Symbol)CUP$ScenariosParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ScenariosParser$stack.peek()), RESULT);
            }
          return CUP$ScenariosParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // scenario_element ::= floors 
            {
              GenericAttr RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$ScenariosParser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$ScenariosParser$stack.peek()).right;
		GenericElement f = (GenericElement)((java_cup.runtime.Symbol) CUP$ScenariosParser$stack.peek()).value;
		
                        RESULT = new GenericAttr<GenericElement>();
                        RESULT.setType("floors");
                        RESULT.setValue(f);
                    
              CUP$ScenariosParser$result = parser.getSymbolFactory().newSymbol("scenario_element",5, ((java_cup.runtime.Symbol)CUP$ScenariosParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ScenariosParser$stack.peek()), RESULT);
            }
          return CUP$ScenariosParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // scenario_element ::= walls 
            {
              GenericAttr RESULT =null;
		int wleft = ((java_cup.runtime.Symbol)CUP$ScenariosParser$stack.peek()).left;
		int wright = ((java_cup.runtime.Symbol)CUP$ScenariosParser$stack.peek()).right;
		GenericElement w = (GenericElement)((java_cup.runtime.Symbol) CUP$ScenariosParser$stack.peek()).value;
		
                        RESULT = new GenericAttr<GenericElement>();
                        RESULT.setType("walls");
                        RESULT.setValue(w);
                    
              CUP$ScenariosParser$result = parser.getSymbolFactory().newSymbol("scenario_element",5, ((java_cup.runtime.Symbol)CUP$ScenariosParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ScenariosParser$stack.peek()), RESULT);
            }
          return CUP$ScenariosParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // scenario_element ::= characters 
            {
              GenericAttr RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$ScenariosParser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$ScenariosParser$stack.peek()).right;
		GenericElement c = (GenericElement)((java_cup.runtime.Symbol) CUP$ScenariosParser$stack.peek()).value;
		
                        RESULT = new GenericAttr<GenericElement>();
                        RESULT.setType("characters");
                        RESULT.setValue(c);
                    
              CUP$ScenariosParser$result = parser.getSymbolFactory().newSymbol("scenario_element",5, ((java_cup.runtime.Symbol)CUP$ScenariosParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ScenariosParser$stack.peek()), RESULT);
            }
          return CUP$ScenariosParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // scenario_elements ::= scenario_element scenario_elements 
            {
              GenericElement RESULT =null;
		int elementleft = ((java_cup.runtime.Symbol)CUP$ScenariosParser$stack.elementAt(CUP$ScenariosParser$top-1)).left;
		int elementright = ((java_cup.runtime.Symbol)CUP$ScenariosParser$stack.elementAt(CUP$ScenariosParser$top-1)).right;
		GenericAttr element = (GenericAttr)((java_cup.runtime.Symbol) CUP$ScenariosParser$stack.elementAt(CUP$ScenariosParser$top-1)).value;
		int elementsleft = ((java_cup.runtime.Symbol)CUP$ScenariosParser$stack.peek()).left;
		int elementsright = ((java_cup.runtime.Symbol)CUP$ScenariosParser$stack.peek()).right;
		GenericElement elements = (GenericElement)((java_cup.runtime.Symbol) CUP$ScenariosParser$stack.peek()).value;
		
                        RESULT = new GenericElement();
                        RESULT.addAttr(element);
                        RESULT.addAll(elements);
                    
              CUP$ScenariosParser$result = parser.getSymbolFactory().newSymbol("scenario_elements",15, ((java_cup.runtime.Symbol)CUP$ScenariosParser$stack.elementAt(CUP$ScenariosParser$top-1)), ((java_cup.runtime.Symbol)CUP$ScenariosParser$stack.peek()), RESULT);
            }
          return CUP$ScenariosParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // scenario_elements ::= scenario_element 
            {
              GenericElement RESULT =null;
		int elementleft = ((java_cup.runtime.Symbol)CUP$ScenariosParser$stack.peek()).left;
		int elementright = ((java_cup.runtime.Symbol)CUP$ScenariosParser$stack.peek()).right;
		GenericAttr element = (GenericAttr)((java_cup.runtime.Symbol) CUP$ScenariosParser$stack.peek()).value;
		
                        RESULT = new GenericElement();
                        RESULT.addAttr(element);
                    
              CUP$ScenariosParser$result = parser.getSymbolFactory().newSymbol("scenario_elements",15, ((java_cup.runtime.Symbol)CUP$ScenariosParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ScenariosParser$stack.peek()), RESULT);
            }
          return CUP$ScenariosParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // width ::= WIDTH EQUAL INT 
            {
              Integer RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$ScenariosParser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$ScenariosParser$stack.peek()).right;
		Integer i = (Integer)((java_cup.runtime.Symbol) CUP$ScenariosParser$stack.peek()).value;
		 RESULT = i; 
              CUP$ScenariosParser$result = parser.getSymbolFactory().newSymbol("width",4, ((java_cup.runtime.Symbol)CUP$ScenariosParser$stack.elementAt(CUP$ScenariosParser$top-2)), ((java_cup.runtime.Symbol)CUP$ScenariosParser$stack.peek()), RESULT);
            }
          return CUP$ScenariosParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // height ::= HEIGHT EQUAL INT 
            {
              Integer RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$ScenariosParser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$ScenariosParser$stack.peek()).right;
		Integer i = (Integer)((java_cup.runtime.Symbol) CUP$ScenariosParser$stack.peek()).value;
		 RESULT = i; 
              CUP$ScenariosParser$result = parser.getSymbolFactory().newSymbol("height",3, ((java_cup.runtime.Symbol)CUP$ScenariosParser$stack.elementAt(CUP$ScenariosParser$top-2)), ((java_cup.runtime.Symbol)CUP$ScenariosParser$stack.peek()), RESULT);
            }
          return CUP$ScenariosParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // bg ::= BG EQUAL ID 
            {
              String RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$ScenariosParser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$ScenariosParser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$ScenariosParser$stack.peek()).value;
		 RESULT = id; 
              CUP$ScenariosParser$result = parser.getSymbolFactory().newSymbol("bg",2, ((java_cup.runtime.Symbol)CUP$ScenariosParser$stack.elementAt(CUP$ScenariosParser$top-2)), ((java_cup.runtime.Symbol)CUP$ScenariosParser$stack.peek()), RESULT);
            }
          return CUP$ScenariosParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // name ::= NAME EQUAL ID 
            {
              String RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$ScenariosParser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$ScenariosParser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$ScenariosParser$stack.peek()).value;
		 RESULT = id; 
              CUP$ScenariosParser$result = parser.getSymbolFactory().newSymbol("name",1, ((java_cup.runtime.Symbol)CUP$ScenariosParser$stack.elementAt(CUP$ScenariosParser$top-2)), ((java_cup.runtime.Symbol)CUP$ScenariosParser$stack.peek()), RESULT);
            }
          return CUP$ScenariosParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // scenario_attr ::= width 
            {
              GenericAttr RESULT =null;
		int widthleft = ((java_cup.runtime.Symbol)CUP$ScenariosParser$stack.peek()).left;
		int widthright = ((java_cup.runtime.Symbol)CUP$ScenariosParser$stack.peek()).right;
		Integer width = (Integer)((java_cup.runtime.Symbol) CUP$ScenariosParser$stack.peek()).value;
		
                   RESULT = new GenericAttr<Integer>();
                   RESULT.setType("width");
                   RESULT.setValue(width);
               
              CUP$ScenariosParser$result = parser.getSymbolFactory().newSymbol("scenario_attr",6, ((java_cup.runtime.Symbol)CUP$ScenariosParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ScenariosParser$stack.peek()), RESULT);
            }
          return CUP$ScenariosParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // scenario_attr ::= height 
            {
              GenericAttr RESULT =null;
		int heightleft = ((java_cup.runtime.Symbol)CUP$ScenariosParser$stack.peek()).left;
		int heightright = ((java_cup.runtime.Symbol)CUP$ScenariosParser$stack.peek()).right;
		Integer height = (Integer)((java_cup.runtime.Symbol) CUP$ScenariosParser$stack.peek()).value;
		
                    RESULT = new GenericAttr<Integer>();
                    RESULT.setType("height");
                    RESULT.setValue(height);
                
              CUP$ScenariosParser$result = parser.getSymbolFactory().newSymbol("scenario_attr",6, ((java_cup.runtime.Symbol)CUP$ScenariosParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ScenariosParser$stack.peek()), RESULT);
            }
          return CUP$ScenariosParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // scenario_attr ::= bg 
            {
              GenericAttr RESULT =null;
		int bgleft = ((java_cup.runtime.Symbol)CUP$ScenariosParser$stack.peek()).left;
		int bgright = ((java_cup.runtime.Symbol)CUP$ScenariosParser$stack.peek()).right;
		String bg = (String)((java_cup.runtime.Symbol) CUP$ScenariosParser$stack.peek()).value;
		
                    RESULT = new GenericAttr<String>();
                    RESULT.setType("bg");
                    RESULT.setValue(bg);
                
              CUP$ScenariosParser$result = parser.getSymbolFactory().newSymbol("scenario_attr",6, ((java_cup.runtime.Symbol)CUP$ScenariosParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ScenariosParser$stack.peek()), RESULT);
            }
          return CUP$ScenariosParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // scenario_attr ::= name 
            {
              GenericAttr RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$ScenariosParser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$ScenariosParser$stack.peek()).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$ScenariosParser$stack.peek()).value;
		
                    RESULT = new GenericAttr<String>();
                    RESULT.setType("name");
                    RESULT.setValue(n);
                
              CUP$ScenariosParser$result = parser.getSymbolFactory().newSymbol("scenario_attr",6, ((java_cup.runtime.Symbol)CUP$ScenariosParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ScenariosParser$stack.peek()), RESULT);
            }
          return CUP$ScenariosParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // scenario_attrs ::= scenario_attr SEMICOLON scenario_attrs 
            {
              GenericElement RESULT =null;
		int attrleft = ((java_cup.runtime.Symbol)CUP$ScenariosParser$stack.elementAt(CUP$ScenariosParser$top-2)).left;
		int attrright = ((java_cup.runtime.Symbol)CUP$ScenariosParser$stack.elementAt(CUP$ScenariosParser$top-2)).right;
		GenericAttr attr = (GenericAttr)((java_cup.runtime.Symbol) CUP$ScenariosParser$stack.elementAt(CUP$ScenariosParser$top-2)).value;
		int attrsleft = ((java_cup.runtime.Symbol)CUP$ScenariosParser$stack.peek()).left;
		int attrsright = ((java_cup.runtime.Symbol)CUP$ScenariosParser$stack.peek()).right;
		GenericElement attrs = (GenericElement)((java_cup.runtime.Symbol) CUP$ScenariosParser$stack.peek()).value;
		
                    RESULT = new GenericElement();
                    RESULT.addAttr(attr);
                    RESULT.addAll(attrs);
                
              CUP$ScenariosParser$result = parser.getSymbolFactory().newSymbol("scenario_attrs",16, ((java_cup.runtime.Symbol)CUP$ScenariosParser$stack.elementAt(CUP$ScenariosParser$top-2)), ((java_cup.runtime.Symbol)CUP$ScenariosParser$stack.peek()), RESULT);
            }
          return CUP$ScenariosParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // scenario_attrs ::= scenario_attr SEMICOLON 
            {
              GenericElement RESULT =null;
		int attrleft = ((java_cup.runtime.Symbol)CUP$ScenariosParser$stack.elementAt(CUP$ScenariosParser$top-1)).left;
		int attrright = ((java_cup.runtime.Symbol)CUP$ScenariosParser$stack.elementAt(CUP$ScenariosParser$top-1)).right;
		GenericAttr attr = (GenericAttr)((java_cup.runtime.Symbol) CUP$ScenariosParser$stack.elementAt(CUP$ScenariosParser$top-1)).value;
		
                    RESULT = new GenericElement();
                    RESULT.addAttr(attr);
                
              CUP$ScenariosParser$result = parser.getSymbolFactory().newSymbol("scenario_attrs",16, ((java_cup.runtime.Symbol)CUP$ScenariosParser$stack.elementAt(CUP$ScenariosParser$top-1)), ((java_cup.runtime.Symbol)CUP$ScenariosParser$stack.peek()), RESULT);
            }
          return CUP$ScenariosParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // scenario ::= INIT_SCENARIO scenario_attrs MORE_THAN scenario_elements END_SCENARIO 
            {
              Scenario RESULT =null;
		int attrsleft = ((java_cup.runtime.Symbol)CUP$ScenariosParser$stack.elementAt(CUP$ScenariosParser$top-3)).left;
		int attrsright = ((java_cup.runtime.Symbol)CUP$ScenariosParser$stack.elementAt(CUP$ScenariosParser$top-3)).right;
		GenericElement attrs = (GenericElement)((java_cup.runtime.Symbol) CUP$ScenariosParser$stack.elementAt(CUP$ScenariosParser$top-3)).value;
		int elementsleft = ((java_cup.runtime.Symbol)CUP$ScenariosParser$stack.elementAt(CUP$ScenariosParser$top-1)).left;
		int elementsright = ((java_cup.runtime.Symbol)CUP$ScenariosParser$stack.elementAt(CUP$ScenariosParser$top-1)).right;
		GenericElement elements = (GenericElement)((java_cup.runtime.Symbol) CUP$ScenariosParser$stack.elementAt(CUP$ScenariosParser$top-1)).value;
		
    RESULT = new Scenario();
    RESULT.setName((String)attrs.getAttr("name").getValue());
    RESULT.setHeight((Integer)attrs.getAttr("height").getValue());
    RESULT.setWidth((Integer)attrs.getAttr("width").getValue());
    RESULT.setBg((String)attrs.getAttr("bg").getValue());
    RESULT.setElements(elements);

              CUP$ScenariosParser$result = parser.getSymbolFactory().newSymbol("scenario",34, ((java_cup.runtime.Symbol)CUP$ScenariosParser$stack.elementAt(CUP$ScenariosParser$top-4)), ((java_cup.runtime.Symbol)CUP$ScenariosParser$stack.peek()), RESULT);
            }
          return CUP$ScenariosParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // scenarios ::= scenario scenarios 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ScenariosParser$stack.elementAt(CUP$ScenariosParser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ScenariosParser$stack.elementAt(CUP$ScenariosParser$top-1)).right;
		Scenario s = (Scenario)((java_cup.runtime.Symbol) CUP$ScenariosParser$stack.elementAt(CUP$ScenariosParser$top-1)).value;
		
                this.parser.scenarios.add(s);
                System.out.println("add scenario");
            
              CUP$ScenariosParser$result = parser.getSymbolFactory().newSymbol("scenarios",0, ((java_cup.runtime.Symbol)CUP$ScenariosParser$stack.elementAt(CUP$ScenariosParser$top-1)), ((java_cup.runtime.Symbol)CUP$ScenariosParser$stack.peek()), RESULT);
            }
          return CUP$ScenariosParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // scenarios ::= scenario 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ScenariosParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ScenariosParser$stack.peek()).right;
		Scenario s = (Scenario)((java_cup.runtime.Symbol) CUP$ScenariosParser$stack.peek()).value;
		
                this.parser.scenarios.add(s);
                System.out.println("add scenario");
            
              CUP$ScenariosParser$result = parser.getSymbolFactory().newSymbol("scenarios",0, ((java_cup.runtime.Symbol)CUP$ScenariosParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ScenariosParser$stack.peek()), RESULT);
            }
          return CUP$ScenariosParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= scenarios EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$ScenariosParser$stack.elementAt(CUP$ScenariosParser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$ScenariosParser$stack.elementAt(CUP$ScenariosParser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$ScenariosParser$stack.elementAt(CUP$ScenariosParser$top-1)).value;
		RESULT = start_val;
              CUP$ScenariosParser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$ScenariosParser$stack.elementAt(CUP$ScenariosParser$top-1)), ((java_cup.runtime.Symbol)CUP$ScenariosParser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$ScenariosParser$parser.done_parsing();
          return CUP$ScenariosParser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

