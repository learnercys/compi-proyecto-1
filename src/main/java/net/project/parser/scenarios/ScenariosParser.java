
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20150930 (SVN rev 66)
//----------------------------------------------------

package net.project.parser.scenarios;

import java_cup.runtime.*;
import java.util.ArrayList;
import net.project.utils.Scenario;

/** CUP v0.11b 20150930 (SVN rev 66) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class ScenariosParser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public ScenariosParser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public ScenariosParser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public ScenariosParser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\072\000\002\002\004\000\002\002\003\000\002\002" +
    "\004\000\002\045\007\000\002\044\004\000\002\044\005" +
    "\000\002\005\003\000\002\005\003\000\002\005\003\000" +
    "\002\005\003\000\002\037\005\000\002\040\005\000\002" +
    "\041\005\000\002\042\005\000\002\003\003\000\002\003" +
    "\004\000\002\004\003\000\002\004\003\000\002\004\003" +
    "\000\002\004\003\000\002\004\003\000\002\006\005\000" +
    "\002\007\003\000\002\007\004\000\002\010\003\000\002" +
    "\010\003\000\002\011\013\000\002\012\005\000\002\013" +
    "\003\000\002\013\004\000\002\014\011\000\002\015\005" +
    "\000\002\016\003\000\002\016\004\000\002\017\011\000" +
    "\002\020\005\000\002\021\003\000\002\021\004\000\002" +
    "\022\011\000\002\023\005\000\002\024\003\000\002\024" +
    "\004\000\002\025\003\000\002\025\003\000\002\026\005" +
    "\000\002\027\003\000\002\027\004\000\002\030\011\000" +
    "\002\031\005\000\002\032\003\000\002\032\004\000\002" +
    "\033\011\000\002\034\005\000\002\035\003\000\002\035" +
    "\004\000\002\036\011\000\002\043\003\000\002\043\006" +
    "" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\207\000\004\004\004\001\002\000\012\037\022\040" +
    "\021\041\015\042\017\001\002\000\006\002\000\004\004" +
    "\001\002\000\004\002\007\001\002\000\004\002\001\001" +
    "\002\000\004\002\uffff\001\002\000\004\035\ufffb\001\002" +
    "\000\004\035\ufff8\001\002\000\004\035\210\001\002\000" +
    "\004\035\ufffa\001\002\000\004\034\206\001\002\000\004" +
    "\036\031\001\002\000\004\034\027\001\002\000\004\035" +
    "\ufff9\001\002\000\004\034\025\001\002\000\004\034\023" +
    "\001\002\000\004\043\024\001\002\000\004\035\ufff7\001" +
    "\002\000\004\043\026\001\002\000\004\035\ufff6\001\002" +
    "\000\004\044\030\001\002\000\004\035\ufff4\001\002\000" +
    "\014\006\044\014\033\016\041\020\032\026\043\001\002" +
    "\000\006\022\154\024\150\001\002\000\004\043\135\001" +
    "\002\000\016\005\ufff0\006\ufff0\014\ufff0\016\ufff0\020\ufff0" +
    "\026\ufff0\001\002\000\016\005\ufff1\006\ufff1\014\ufff1\016" +
    "\ufff1\020\ufff1\026\ufff1\001\002\000\004\005\134\001\002" +
    "\000\016\005\uffee\006\uffee\014\uffee\016\uffee\020\uffee\026" +
    "\uffee\001\002\000\016\005\ufff3\006\044\014\033\016\041" +
    "\020\032\026\043\001\002\000\004\043\114\001\002\000" +
    "\016\005\uffef\006\uffef\014\uffef\016\uffef\020\uffef\026\uffef" +
    "\001\002\000\004\043\101\001\002\000\006\010\052\012" +
    "\053\001\002\000\016\005\uffed\006\uffed\014\uffed\016\uffed" +
    "\020\uffed\026\uffed\001\002\000\010\007\uffe8\010\uffe8\012" +
    "\uffe8\001\002\000\004\007\100\001\002\000\010\007\uffe9" +
    "\010\uffe9\012\uffe9\001\002\000\010\007\uffeb\010\052\012" +
    "\053\001\002\000\004\043\067\001\002\000\004\043\054" +
    "\001\002\000\004\030\061\001\002\000\006\013\uffe5\043" +
    "\054\001\002\000\004\013\057\001\002\000\010\007\uffe6" +
    "\010\uffe6\012\uffe6\001\002\000\004\013\uffe4\001\002\000" +
    "\004\044\062\001\002\000\004\032\063\001\002\000\004" +
    "\044\064\001\002\000\004\031\065\001\002\000\004\035" +
    "\066\001\002\000\006\013\uffe3\043\uffe3\001\002\000\004" +
    "\030\070\001\002\000\004\044\071\001\002\000\004\032" +
    "\072\001\002\000\004\044\073\001\002\000\004\031\074" +
    "\001\002\000\004\035\075\001\002\000\004\011\076\001" +
    "\002\000\010\007\uffe7\010\uffe7\012\uffe7\001\002\000\004" +
    "\007\uffea\001\002\000\016\005\uffec\006\uffec\014\uffec\016" +
    "\uffec\020\uffec\026\uffec\001\002\000\004\030\106\001\002" +
    "\000\004\027\105\001\002\000\006\027\uffcc\043\101\001" +
    "\002\000\004\027\uffcb\001\002\000\016\005\uffcd\006\uffcd" +
    "\014\uffcd\016\uffcd\020\uffcd\026\uffcd\001\002\000\004\044" +
    "\107\001\002\000\004\032\110\001\002\000\004\044\111" +
    "\001\002\000\004\031\112\001\002\000\004\035\113\001" +
    "\002\000\006\027\uffca\043\uffca\001\002\000\004\030\121" +
    "\001\002\000\006\017\uffdd\043\114\001\002\000\004\017" +
    "\117\001\002\000\016\005\uffde\006\uffde\014\uffde\016\uffde" +
    "\020\uffde\026\uffde\001\002\000\004\017\uffdc\001\002\000" +
    "\004\044\123\001\002\000\004\032\127\001\002\000\010" +
    "\031\uffc9\032\uffc9\033\124\001\002\000\004\033\125\001" +
    "\002\000\004\044\126\001\002\000\006\031\uffc8\032\uffc8" +
    "\001\002\000\004\044\123\001\002\000\004\031\131\001" +
    "\002\000\004\035\132\001\002\000\006\017\uffdb\043\uffdb" +
    "\001\002\000\004\005\ufff2\001\002\000\006\002\ufffe\004" +
    "\ufffe\001\002\000\004\030\142\001\002\000\006\015\uffe1" +
    "\043\135\001\002\000\004\015\140\001\002\000\016\005" +
    "\uffe2\006\uffe2\014\uffe2\016\uffe2\020\uffe2\026\uffe2\001\002" +
    "\000\004\015\uffe0\001\002\000\004\044\123\001\002\000" +
    "\004\032\144\001\002\000\004\044\123\001\002\000\004" +
    "\031\146\001\002\000\004\035\147\001\002\000\006\015" +
    "\uffdf\043\uffdf\001\002\000\004\043\173\001\002\000\010" +
    "\021\uffd9\022\154\024\150\001\002\000\004\021\171\001" +
    "\002\000\010\021\uffd6\022\uffd6\024\uffd6\001\002\000\004" +
    "\043\156\001\002\000\010\021\uffd7\022\uffd7\024\uffd7\001" +
    "\002\000\004\030\163\001\002\000\004\023\162\001\002" +
    "\000\006\023\uffd4\043\156\001\002\000\004\023\uffd3\001" +
    "\002\000\010\021\uffd5\022\uffd5\024\uffd5\001\002\000\004" +
    "\044\164\001\002\000\004\032\165\001\002\000\004\044" +
    "\166\001\002\000\004\031\167\001\002\000\004\035\170" +
    "\001\002\000\006\023\uffd2\043\uffd2\001\002\000\016\005" +
    "\uffda\006\uffda\014\uffda\016\uffda\020\uffda\026\uffda\001\002" +
    "\000\004\021\uffd8\001\002\000\004\030\200\001\002\000" +
    "\006\025\uffd0\043\173\001\002\000\004\025\176\001\002" +
    "\000\010\021\uffd1\022\uffd1\024\uffd1\001\002\000\004\025" +
    "\uffcf\001\002\000\004\044\201\001\002\000\004\032\202" +
    "\001\002\000\004\044\203\001\002\000\004\031\204\001" +
    "\002\000\004\035\205\001\002\000\006\025\uffce\043\uffce" +
    "\001\002\000\004\044\207\001\002\000\004\035\ufff5\001" +
    "\002\000\014\036\ufffd\037\022\040\021\041\015\042\017" +
    "\001\002\000\004\036\ufffc\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\207\000\006\002\005\045\004\001\001\000\016\005" +
    "\012\037\010\040\013\041\017\042\011\044\015\001\001" +
    "\000\006\002\007\045\004\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\020\003\035\004\037\006" +
    "\034\015\033\020\041\023\036\034\044\001\001\000\012" +
    "\024\151\025\150\026\154\031\152\001\001\000\006\016" +
    "\136\017\135\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\020\003\132\004" +
    "\037\006\034\015\033\020\041\023\036\034\044\001\001" +
    "\000\006\021\115\022\114\001\001\000\002\001\001\000" +
    "\006\035\101\036\102\001\001\000\012\007\046\010\050" +
    "\011\047\012\045\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\012\007\076" +
    "\010\050\011\047\012\045\001\001\000\002\001\001\000" +
    "\006\013\055\014\054\001\001\000\002\001\001\000\006" +
    "\013\057\014\054\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\035\103\036\102\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\021\117\022\114\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\043\121\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\043\127\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\016\140\017\135\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\043\142" +
    "\001\001\000\002\001\001\000\004\043\144\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\032\174\033\173\001\001\000\012\024\171\025\150\026" +
    "\154\031\152\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\027\156\030\157\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\027\160\030\157" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\032\176\033\173" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\016\005\012\037\010" +
    "\040\013\041\017\042\011\044\210\001\001\000\002\001" +
    "\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$ScenariosParser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$ScenariosParser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$ScenariosParser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    public ArrayList<Scenario> scenarios = new ArrayList<>();


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$ScenariosParser$actions {
  private final ScenariosParser parser;

  /** Constructor */
  CUP$ScenariosParser$actions(ScenariosParser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$ScenariosParser$do_action_part00000000(
    int                        CUP$ScenariosParser$act_num,
    java_cup.runtime.lr_parser CUP$ScenariosParser$parser,
    java.util.Stack            CUP$ScenariosParser$stack,
    int                        CUP$ScenariosParser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$ScenariosParser$result;

      /* select the action based on the action number */
      switch (CUP$ScenariosParser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= scenarios EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$ScenariosParser$stack.elementAt(CUP$ScenariosParser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$ScenariosParser$stack.elementAt(CUP$ScenariosParser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$ScenariosParser$stack.elementAt(CUP$ScenariosParser$top-1)).value;
		RESULT = start_val;
              CUP$ScenariosParser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$ScenariosParser$stack.elementAt(CUP$ScenariosParser$top-1)), ((java_cup.runtime.Symbol)CUP$ScenariosParser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$ScenariosParser$parser.done_parsing();
          return CUP$ScenariosParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // scenarios ::= scenario 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ScenariosParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ScenariosParser$stack.peek()).right;
		Scenario s = (Scenario)((java_cup.runtime.Symbol) CUP$ScenariosParser$stack.peek()).value;
		
                this.parser.scenarios.add(s);
            
              CUP$ScenariosParser$result = parser.getSymbolFactory().newSymbol("scenarios",0, ((java_cup.runtime.Symbol)CUP$ScenariosParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ScenariosParser$stack.peek()), RESULT);
            }
          return CUP$ScenariosParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // scenarios ::= scenario scenarios 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ScenariosParser$stack.elementAt(CUP$ScenariosParser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ScenariosParser$stack.elementAt(CUP$ScenariosParser$top-1)).right;
		Scenario s = (Scenario)((java_cup.runtime.Symbol) CUP$ScenariosParser$stack.elementAt(CUP$ScenariosParser$top-1)).value;
		
                this.parser.scenarios.add(s);
            
              CUP$ScenariosParser$result = parser.getSymbolFactory().newSymbol("scenarios",0, ((java_cup.runtime.Symbol)CUP$ScenariosParser$stack.elementAt(CUP$ScenariosParser$top-1)), ((java_cup.runtime.Symbol)CUP$ScenariosParser$stack.peek()), RESULT);
            }
          return CUP$ScenariosParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // scenario ::= INIT_SCENARIO scenario_attrs MORE_THAN scenario_elements END_SCENARIO 
            {
              Scenario RESULT =null;
		int attrsleft = ((java_cup.runtime.Symbol)CUP$ScenariosParser$stack.elementAt(CUP$ScenariosParser$top-3)).left;
		int attrsright = ((java_cup.runtime.Symbol)CUP$ScenariosParser$stack.elementAt(CUP$ScenariosParser$top-3)).right;
		GenericElement attrs = (GenericElement)((java_cup.runtime.Symbol) CUP$ScenariosParser$stack.elementAt(CUP$ScenariosParser$top-3)).value;

              CUP$ScenariosParser$result = parser.getSymbolFactory().newSymbol("scenario",35, ((java_cup.runtime.Symbol)CUP$ScenariosParser$stack.elementAt(CUP$ScenariosParser$top-4)), ((java_cup.runtime.Symbol)CUP$ScenariosParser$stack.peek()), RESULT);
            }
          return CUP$ScenariosParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // scenario_attrs ::= scenario_attr SEMICOLON 
            {
              GenericElement RESULT =null;

              CUP$ScenariosParser$result = parser.getSymbolFactory().newSymbol("scenario_attrs",34, ((java_cup.runtime.Symbol)CUP$ScenariosParser$stack.elementAt(CUP$ScenariosParser$top-1)), ((java_cup.runtime.Symbol)CUP$ScenariosParser$stack.peek()), RESULT);
            }
          return CUP$ScenariosParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // scenario_attrs ::= scenario_attr SEMICOLON scenario_attrs 
            {
              GenericElement RESULT =null;

              CUP$ScenariosParser$result = parser.getSymbolFactory().newSymbol("scenario_attrs",34, ((java_cup.runtime.Symbol)CUP$ScenariosParser$stack.elementAt(CUP$ScenariosParser$top-2)), ((java_cup.runtime.Symbol)CUP$ScenariosParser$stack.peek()), RESULT);
            }
          return CUP$ScenariosParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // scenario_attr ::= name 
            {
              Object RESULT =null;

              CUP$ScenariosParser$result = parser.getSymbolFactory().newSymbol("scenario_attr",3, ((java_cup.runtime.Symbol)CUP$ScenariosParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ScenariosParser$stack.peek()), RESULT);
            }
          return CUP$ScenariosParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // scenario_attr ::= bg 
            {
              Object RESULT =null;

              CUP$ScenariosParser$result = parser.getSymbolFactory().newSymbol("scenario_attr",3, ((java_cup.runtime.Symbol)CUP$ScenariosParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ScenariosParser$stack.peek()), RESULT);
            }
          return CUP$ScenariosParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // scenario_attr ::= height 
            {
              Object RESULT =null;

              CUP$ScenariosParser$result = parser.getSymbolFactory().newSymbol("scenario_attr",3, ((java_cup.runtime.Symbol)CUP$ScenariosParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ScenariosParser$stack.peek()), RESULT);
            }
          return CUP$ScenariosParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // scenario_attr ::= width 
            {
              Object RESULT =null;

              CUP$ScenariosParser$result = parser.getSymbolFactory().newSymbol("scenario_attr",3, ((java_cup.runtime.Symbol)CUP$ScenariosParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ScenariosParser$stack.peek()), RESULT);
            }
          return CUP$ScenariosParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // name ::= NAME EQUAL ID 
            {
              Object RESULT =null;

              CUP$ScenariosParser$result = parser.getSymbolFactory().newSymbol("name",29, ((java_cup.runtime.Symbol)CUP$ScenariosParser$stack.elementAt(CUP$ScenariosParser$top-2)), ((java_cup.runtime.Symbol)CUP$ScenariosParser$stack.peek()), RESULT);
            }
          return CUP$ScenariosParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // bg ::= BG EQUAL ID 
            {
              Object RESULT =null;

              CUP$ScenariosParser$result = parser.getSymbolFactory().newSymbol("bg",30, ((java_cup.runtime.Symbol)CUP$ScenariosParser$stack.elementAt(CUP$ScenariosParser$top-2)), ((java_cup.runtime.Symbol)CUP$ScenariosParser$stack.peek()), RESULT);
            }
          return CUP$ScenariosParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // height ::= HEIGHT EQUAL INT 
            {
              Object RESULT =null;

              CUP$ScenariosParser$result = parser.getSymbolFactory().newSymbol("height",31, ((java_cup.runtime.Symbol)CUP$ScenariosParser$stack.elementAt(CUP$ScenariosParser$top-2)), ((java_cup.runtime.Symbol)CUP$ScenariosParser$stack.peek()), RESULT);
            }
          return CUP$ScenariosParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // width ::= WIDTH EQUAL INT 
            {
              Object RESULT =null;

              CUP$ScenariosParser$result = parser.getSymbolFactory().newSymbol("width",32, ((java_cup.runtime.Symbol)CUP$ScenariosParser$stack.elementAt(CUP$ScenariosParser$top-2)), ((java_cup.runtime.Symbol)CUP$ScenariosParser$stack.peek()), RESULT);
            }
          return CUP$ScenariosParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // scenario_elements ::= scenario_element 
            {
              Object RESULT =null;

              CUP$ScenariosParser$result = parser.getSymbolFactory().newSymbol("scenario_elements",1, ((java_cup.runtime.Symbol)CUP$ScenariosParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ScenariosParser$stack.peek()), RESULT);
            }
          return CUP$ScenariosParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // scenario_elements ::= scenario_element scenario_elements 
            {
              Object RESULT =null;

              CUP$ScenariosParser$result = parser.getSymbolFactory().newSymbol("scenario_elements",1, ((java_cup.runtime.Symbol)CUP$ScenariosParser$stack.elementAt(CUP$ScenariosParser$top-1)), ((java_cup.runtime.Symbol)CUP$ScenariosParser$stack.peek()), RESULT);
            }
          return CUP$ScenariosParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // scenario_element ::= characters 
            {
              Object RESULT =null;

              CUP$ScenariosParser$result = parser.getSymbolFactory().newSymbol("scenario_element",2, ((java_cup.runtime.Symbol)CUP$ScenariosParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ScenariosParser$stack.peek()), RESULT);
            }
          return CUP$ScenariosParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // scenario_element ::= walls 
            {
              Object RESULT =null;

              CUP$ScenariosParser$result = parser.getSymbolFactory().newSymbol("scenario_element",2, ((java_cup.runtime.Symbol)CUP$ScenariosParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ScenariosParser$stack.peek()), RESULT);
            }
          return CUP$ScenariosParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // scenario_element ::= floors 
            {
              Object RESULT =null;

              CUP$ScenariosParser$result = parser.getSymbolFactory().newSymbol("scenario_element",2, ((java_cup.runtime.Symbol)CUP$ScenariosParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ScenariosParser$stack.peek()), RESULT);
            }
          return CUP$ScenariosParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // scenario_element ::= extras 
            {
              Object RESULT =null;

              CUP$ScenariosParser$result = parser.getSymbolFactory().newSymbol("scenario_element",2, ((java_cup.runtime.Symbol)CUP$ScenariosParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ScenariosParser$stack.peek()), RESULT);
            }
          return CUP$ScenariosParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // scenario_element ::= finish 
            {
              Object RESULT =null;

              CUP$ScenariosParser$result = parser.getSymbolFactory().newSymbol("scenario_element",2, ((java_cup.runtime.Symbol)CUP$ScenariosParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ScenariosParser$stack.peek()), RESULT);
            }
          return CUP$ScenariosParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // characters ::= INIT_CHARACTERS characters_elements END_CHARACTERS 
            {
              Object RESULT =null;

              CUP$ScenariosParser$result = parser.getSymbolFactory().newSymbol("characters",4, ((java_cup.runtime.Symbol)CUP$ScenariosParser$stack.elementAt(CUP$ScenariosParser$top-2)), ((java_cup.runtime.Symbol)CUP$ScenariosParser$stack.peek()), RESULT);
            }
          return CUP$ScenariosParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // characters_elements ::= characters_element 
            {
              Object RESULT =null;

              CUP$ScenariosParser$result = parser.getSymbolFactory().newSymbol("characters_elements",5, ((java_cup.runtime.Symbol)CUP$ScenariosParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ScenariosParser$stack.peek()), RESULT);
            }
          return CUP$ScenariosParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // characters_elements ::= characters_element characters_elements 
            {
              Object RESULT =null;

              CUP$ScenariosParser$result = parser.getSymbolFactory().newSymbol("characters_elements",5, ((java_cup.runtime.Symbol)CUP$ScenariosParser$stack.elementAt(CUP$ScenariosParser$top-1)), ((java_cup.runtime.Symbol)CUP$ScenariosParser$stack.peek()), RESULT);
            }
          return CUP$ScenariosParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // characters_element ::= heroes 
            {
              Object RESULT =null;

              CUP$ScenariosParser$result = parser.getSymbolFactory().newSymbol("characters_element",6, ((java_cup.runtime.Symbol)CUP$ScenariosParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ScenariosParser$stack.peek()), RESULT);
            }
          return CUP$ScenariosParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // characters_element ::= villains 
            {
              Object RESULT =null;

              CUP$ScenariosParser$result = parser.getSymbolFactory().newSymbol("characters_element",6, ((java_cup.runtime.Symbol)CUP$ScenariosParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ScenariosParser$stack.peek()), RESULT);
            }
          return CUP$ScenariosParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // heroes ::= INIT_HEROES ID O_PAREN INT COMMA INT C_PAREN SEMICOLON END_HEROES 
            {
              Object RESULT =null;

              CUP$ScenariosParser$result = parser.getSymbolFactory().newSymbol("heroes",7, ((java_cup.runtime.Symbol)CUP$ScenariosParser$stack.elementAt(CUP$ScenariosParser$top-8)), ((java_cup.runtime.Symbol)CUP$ScenariosParser$stack.peek()), RESULT);
            }
          return CUP$ScenariosParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // villains ::= INIT_VILLAINS villains_elements END_VILLAINS 
            {
              Object RESULT =null;

              CUP$ScenariosParser$result = parser.getSymbolFactory().newSymbol("villains",8, ((java_cup.runtime.Symbol)CUP$ScenariosParser$stack.elementAt(CUP$ScenariosParser$top-2)), ((java_cup.runtime.Symbol)CUP$ScenariosParser$stack.peek()), RESULT);
            }
          return CUP$ScenariosParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // villains_elements ::= villains_element 
            {
              Object RESULT =null;

              CUP$ScenariosParser$result = parser.getSymbolFactory().newSymbol("villains_elements",9, ((java_cup.runtime.Symbol)CUP$ScenariosParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ScenariosParser$stack.peek()), RESULT);
            }
          return CUP$ScenariosParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // villains_elements ::= villains_element villains_elements 
            {
              Object RESULT =null;

              CUP$ScenariosParser$result = parser.getSymbolFactory().newSymbol("villains_elements",9, ((java_cup.runtime.Symbol)CUP$ScenariosParser$stack.elementAt(CUP$ScenariosParser$top-1)), ((java_cup.runtime.Symbol)CUP$ScenariosParser$stack.peek()), RESULT);
            }
          return CUP$ScenariosParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // villains_element ::= ID O_PAREN INT COMMA INT C_PAREN SEMICOLON 
            {
              Object RESULT =null;

              CUP$ScenariosParser$result = parser.getSymbolFactory().newSymbol("villains_element",10, ((java_cup.runtime.Symbol)CUP$ScenariosParser$stack.elementAt(CUP$ScenariosParser$top-6)), ((java_cup.runtime.Symbol)CUP$ScenariosParser$stack.peek()), RESULT);
            }
          return CUP$ScenariosParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // walls ::= INIT_WALLS walls_elements END_WALLS 
            {
              Object RESULT =null;

              CUP$ScenariosParser$result = parser.getSymbolFactory().newSymbol("walls",11, ((java_cup.runtime.Symbol)CUP$ScenariosParser$stack.elementAt(CUP$ScenariosParser$top-2)), ((java_cup.runtime.Symbol)CUP$ScenariosParser$stack.peek()), RESULT);
            }
          return CUP$ScenariosParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // walls_elements ::= walls_element 
            {
              Object RESULT =null;

              CUP$ScenariosParser$result = parser.getSymbolFactory().newSymbol("walls_elements",12, ((java_cup.runtime.Symbol)CUP$ScenariosParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ScenariosParser$stack.peek()), RESULT);
            }
          return CUP$ScenariosParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // walls_elements ::= walls_element walls_elements 
            {
              Object RESULT =null;

              CUP$ScenariosParser$result = parser.getSymbolFactory().newSymbol("walls_elements",12, ((java_cup.runtime.Symbol)CUP$ScenariosParser$stack.elementAt(CUP$ScenariosParser$top-1)), ((java_cup.runtime.Symbol)CUP$ScenariosParser$stack.peek()), RESULT);
            }
          return CUP$ScenariosParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // walls_element ::= ID O_PAREN int_range COMMA int_range C_PAREN SEMICOLON 
            {
              Object RESULT =null;

              CUP$ScenariosParser$result = parser.getSymbolFactory().newSymbol("walls_element",13, ((java_cup.runtime.Symbol)CUP$ScenariosParser$stack.elementAt(CUP$ScenariosParser$top-6)), ((java_cup.runtime.Symbol)CUP$ScenariosParser$stack.peek()), RESULT);
            }
          return CUP$ScenariosParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // floors ::= INIT_FLOOR floors_elements END_FLOOR 
            {
              Object RESULT =null;

              CUP$ScenariosParser$result = parser.getSymbolFactory().newSymbol("floors",14, ((java_cup.runtime.Symbol)CUP$ScenariosParser$stack.elementAt(CUP$ScenariosParser$top-2)), ((java_cup.runtime.Symbol)CUP$ScenariosParser$stack.peek()), RESULT);
            }
          return CUP$ScenariosParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // floors_elements ::= floors_element 
            {
              Object RESULT =null;

              CUP$ScenariosParser$result = parser.getSymbolFactory().newSymbol("floors_elements",15, ((java_cup.runtime.Symbol)CUP$ScenariosParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ScenariosParser$stack.peek()), RESULT);
            }
          return CUP$ScenariosParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // floors_elements ::= floors_element floors_elements 
            {
              Object RESULT =null;

              CUP$ScenariosParser$result = parser.getSymbolFactory().newSymbol("floors_elements",15, ((java_cup.runtime.Symbol)CUP$ScenariosParser$stack.elementAt(CUP$ScenariosParser$top-1)), ((java_cup.runtime.Symbol)CUP$ScenariosParser$stack.peek()), RESULT);
            }
          return CUP$ScenariosParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // floors_element ::= ID O_PAREN int_range COMMA int_range C_PAREN SEMICOLON 
            {
              Object RESULT =null;

              CUP$ScenariosParser$result = parser.getSymbolFactory().newSymbol("floors_element",16, ((java_cup.runtime.Symbol)CUP$ScenariosParser$stack.elementAt(CUP$ScenariosParser$top-6)), ((java_cup.runtime.Symbol)CUP$ScenariosParser$stack.peek()), RESULT);
            }
          return CUP$ScenariosParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // extras ::= INIT_EXTRAS extras_elements END_EXTRAS 
            {
              Object RESULT =null;

              CUP$ScenariosParser$result = parser.getSymbolFactory().newSymbol("extras",17, ((java_cup.runtime.Symbol)CUP$ScenariosParser$stack.elementAt(CUP$ScenariosParser$top-2)), ((java_cup.runtime.Symbol)CUP$ScenariosParser$stack.peek()), RESULT);
            }
          return CUP$ScenariosParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // extras_elements ::= extras_element 
            {
              Object RESULT =null;

              CUP$ScenariosParser$result = parser.getSymbolFactory().newSymbol("extras_elements",18, ((java_cup.runtime.Symbol)CUP$ScenariosParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ScenariosParser$stack.peek()), RESULT);
            }
          return CUP$ScenariosParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // extras_elements ::= extras_element extras_elements 
            {
              Object RESULT =null;

              CUP$ScenariosParser$result = parser.getSymbolFactory().newSymbol("extras_elements",18, ((java_cup.runtime.Symbol)CUP$ScenariosParser$stack.elementAt(CUP$ScenariosParser$top-1)), ((java_cup.runtime.Symbol)CUP$ScenariosParser$stack.peek()), RESULT);
            }
          return CUP$ScenariosParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // extras_element ::= extras_weapons 
            {
              Object RESULT =null;

              CUP$ScenariosParser$result = parser.getSymbolFactory().newSymbol("extras_element",19, ((java_cup.runtime.Symbol)CUP$ScenariosParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ScenariosParser$stack.peek()), RESULT);
            }
          return CUP$ScenariosParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // extras_element ::= extras_bonus 
            {
              Object RESULT =null;

              CUP$ScenariosParser$result = parser.getSymbolFactory().newSymbol("extras_element",19, ((java_cup.runtime.Symbol)CUP$ScenariosParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ScenariosParser$stack.peek()), RESULT);
            }
          return CUP$ScenariosParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // extras_weapons ::= INIT_WEAPONS weapons_elements END_WEAPONS 
            {
              Object RESULT =null;

              CUP$ScenariosParser$result = parser.getSymbolFactory().newSymbol("extras_weapons",20, ((java_cup.runtime.Symbol)CUP$ScenariosParser$stack.elementAt(CUP$ScenariosParser$top-2)), ((java_cup.runtime.Symbol)CUP$ScenariosParser$stack.peek()), RESULT);
            }
          return CUP$ScenariosParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // weapons_elements ::= weapons_element 
            {
              Object RESULT =null;

              CUP$ScenariosParser$result = parser.getSymbolFactory().newSymbol("weapons_elements",21, ((java_cup.runtime.Symbol)CUP$ScenariosParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ScenariosParser$stack.peek()), RESULT);
            }
          return CUP$ScenariosParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // weapons_elements ::= weapons_element weapons_elements 
            {
              Object RESULT =null;

              CUP$ScenariosParser$result = parser.getSymbolFactory().newSymbol("weapons_elements",21, ((java_cup.runtime.Symbol)CUP$ScenariosParser$stack.elementAt(CUP$ScenariosParser$top-1)), ((java_cup.runtime.Symbol)CUP$ScenariosParser$stack.peek()), RESULT);
            }
          return CUP$ScenariosParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // weapons_element ::= ID O_PAREN INT COMMA INT C_PAREN SEMICOLON 
            {
              Object RESULT =null;

              CUP$ScenariosParser$result = parser.getSymbolFactory().newSymbol("weapons_element",22, ((java_cup.runtime.Symbol)CUP$ScenariosParser$stack.elementAt(CUP$ScenariosParser$top-6)), ((java_cup.runtime.Symbol)CUP$ScenariosParser$stack.peek()), RESULT);
            }
          return CUP$ScenariosParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // extras_bonus ::= INIT_BONUS bonus_elements END_BONUS 
            {
              Object RESULT =null;

              CUP$ScenariosParser$result = parser.getSymbolFactory().newSymbol("extras_bonus",23, ((java_cup.runtime.Symbol)CUP$ScenariosParser$stack.elementAt(CUP$ScenariosParser$top-2)), ((java_cup.runtime.Symbol)CUP$ScenariosParser$stack.peek()), RESULT);
            }
          return CUP$ScenariosParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // bonus_elements ::= bonus_element 
            {
              Object RESULT =null;

              CUP$ScenariosParser$result = parser.getSymbolFactory().newSymbol("bonus_elements",24, ((java_cup.runtime.Symbol)CUP$ScenariosParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ScenariosParser$stack.peek()), RESULT);
            }
          return CUP$ScenariosParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // bonus_elements ::= bonus_element bonus_elements 
            {
              Object RESULT =null;

              CUP$ScenariosParser$result = parser.getSymbolFactory().newSymbol("bonus_elements",24, ((java_cup.runtime.Symbol)CUP$ScenariosParser$stack.elementAt(CUP$ScenariosParser$top-1)), ((java_cup.runtime.Symbol)CUP$ScenariosParser$stack.peek()), RESULT);
            }
          return CUP$ScenariosParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // bonus_element ::= ID O_PAREN INT COMMA INT C_PAREN SEMICOLON 
            {
              Object RESULT =null;

              CUP$ScenariosParser$result = parser.getSymbolFactory().newSymbol("bonus_element",25, ((java_cup.runtime.Symbol)CUP$ScenariosParser$stack.elementAt(CUP$ScenariosParser$top-6)), ((java_cup.runtime.Symbol)CUP$ScenariosParser$stack.peek()), RESULT);
            }
          return CUP$ScenariosParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // finish ::= INIT_FINISH finish_elements END_FINISH 
            {
              Object RESULT =null;

              CUP$ScenariosParser$result = parser.getSymbolFactory().newSymbol("finish",26, ((java_cup.runtime.Symbol)CUP$ScenariosParser$stack.elementAt(CUP$ScenariosParser$top-2)), ((java_cup.runtime.Symbol)CUP$ScenariosParser$stack.peek()), RESULT);
            }
          return CUP$ScenariosParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // finish_elements ::= finish_element 
            {
              Object RESULT =null;

              CUP$ScenariosParser$result = parser.getSymbolFactory().newSymbol("finish_elements",27, ((java_cup.runtime.Symbol)CUP$ScenariosParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ScenariosParser$stack.peek()), RESULT);
            }
          return CUP$ScenariosParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // finish_elements ::= finish_element finish_elements 
            {
              Object RESULT =null;

              CUP$ScenariosParser$result = parser.getSymbolFactory().newSymbol("finish_elements",27, ((java_cup.runtime.Symbol)CUP$ScenariosParser$stack.elementAt(CUP$ScenariosParser$top-1)), ((java_cup.runtime.Symbol)CUP$ScenariosParser$stack.peek()), RESULT);
            }
          return CUP$ScenariosParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // finish_element ::= ID O_PAREN INT COMMA INT C_PAREN SEMICOLON 
            {
              Object RESULT =null;

              CUP$ScenariosParser$result = parser.getSymbolFactory().newSymbol("finish_element",28, ((java_cup.runtime.Symbol)CUP$ScenariosParser$stack.elementAt(CUP$ScenariosParser$top-6)), ((java_cup.runtime.Symbol)CUP$ScenariosParser$stack.peek()), RESULT);
            }
          return CUP$ScenariosParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // int_range ::= INT 
            {
              Object RESULT =null;

              CUP$ScenariosParser$result = parser.getSymbolFactory().newSymbol("int_range",33, ((java_cup.runtime.Symbol)CUP$ScenariosParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ScenariosParser$stack.peek()), RESULT);
            }
          return CUP$ScenariosParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // int_range ::= INT DOT DOT INT 
            {
              Object RESULT =null;

              CUP$ScenariosParser$result = parser.getSymbolFactory().newSymbol("int_range",33, ((java_cup.runtime.Symbol)CUP$ScenariosParser$stack.elementAt(CUP$ScenariosParser$top-3)), ((java_cup.runtime.Symbol)CUP$ScenariosParser$stack.peek()), RESULT);
            }
          return CUP$ScenariosParser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$ScenariosParser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$ScenariosParser$do_action(
    int                        CUP$ScenariosParser$act_num,
    java_cup.runtime.lr_parser CUP$ScenariosParser$parser,
    java.util.Stack            CUP$ScenariosParser$stack,
    int                        CUP$ScenariosParser$top)
    throws java.lang.Exception
    {
              return CUP$ScenariosParser$do_action_part00000000(
                               CUP$ScenariosParser$act_num,
                               CUP$ScenariosParser$parser,
                               CUP$ScenariosParser$stack,
                               CUP$ScenariosParser$top);
    }
}

}
