/* The following code was generated by JFlex 1.4.3 on 10/5/15 12:14 AM */

package net.project.scanner.structures;

import java_cup.runtime.Symbol;
import java.util.ArrayList;
import java.util.HashMap;
import net.project.parser.structures.sym;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 10/5/15 12:14 AM from the specification file
 * <tt>structures.jflex</tt>
 */
public class StructuresScanner implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\44\1\44\1\0\1\44\23\0\1\23\1\0\1\24\5\0"+
    "\4\23\1\26\2\0\1\2\12\43\1\0\1\25\1\1\1\27\1\3"+
    "\1\23\1\0\32\21\1\23\1\0\2\23\1\22\1\0\1\14\1\33"+
    "\1\4\1\15\1\17\1\7\1\11\1\36\1\10\2\21\1\40\1\32"+
    "\1\6\1\5\1\35\1\41\1\13\1\16\1\34\1\12\1\37\4\21"+
    "\1\30\1\0\1\31\163\0\1\20\u056e\0\12\42\206\0\12\42\306\0"+
    "\12\42\u019c\0\12\42\166\0\12\42\166\0\12\42\166\0\12\42\166\0"+
    "\12\42\166\0\12\42\166\0\12\42\166\0\12\42\166\0\12\42\340\0"+
    "\12\42\166\0\12\42\106\0\12\42\u0116\0\12\42\106\0\12\42\u0746\0"+
    "\12\42\46\0\12\42\u012c\0\12\42\200\0\12\42\246\0\12\42\6\0"+
    "\12\42\266\0\12\42\126\0\12\42\206\0\12\42\6\0\12\42\u89c6\0"+
    "\12\42\u02a6\0\12\42\46\0\12\42\306\0\12\42\166\0\12\42\u0196\0"+
    "\12\42\u5316\0\12\42\346\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\2\1\1\2\7\1\1\3\1\4\1\5\1\6"+
    "\1\7\5\1\1\10\1\11\4\0\6\12\1\0\6\12"+
    "\7\0\5\12\1\13\7\12\10\0\2\12\1\14\3\12"+
    "\1\15\3\12\1\16\1\12\1\17\10\0\5\12\1\20"+
    "\1\21\1\12\1\22\10\0\1\23\1\24\3\12\1\25"+
    "\5\0\1\26\2\0\2\12\1\27\1\0\1\30\3\0"+
    "\1\31\1\32\1\12\1\33\1\0\1\34\1\35\1\0"+
    "\1\12\2\0\1\12\2\0\1\36\7\0\1\37\1\40";

  private static int [] zzUnpackAction() {
    int [] result = new int[152];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\45\0\112\0\45\0\157\0\224\0\271\0\336"+
    "\0\u0103\0\u0128\0\u014d\0\45\0\45\0\45\0\45\0\45"+
    "\0\u0172\0\u0197\0\u01bc\0\u01e1\0\u0206\0\u022b\0\45\0\u0250"+
    "\0\u0275\0\u029a\0\u02bf\0\157\0\u02e4\0\u0309\0\u032e\0\u0353"+
    "\0\u0378\0\u039d\0\u03c2\0\u03e7\0\u040c\0\u0431\0\u0456\0\u047b"+
    "\0\u04a0\0\u04c5\0\u04ea\0\u050f\0\u0534\0\u0559\0\u057e\0\u05a3"+
    "\0\u05c8\0\u05ed\0\u0612\0\u0637\0\45\0\u065c\0\u0681\0\u06a6"+
    "\0\u06cb\0\u06f0\0\u0715\0\u073a\0\u075f\0\u0784\0\u07a9\0\u07ce"+
    "\0\u07f3\0\u0818\0\u083d\0\u0862\0\u0887\0\u08ac\0\157\0\u08d1"+
    "\0\u08f6\0\u091b\0\157\0\u0940\0\u0965\0\u098a\0\157\0\u09af"+
    "\0\157\0\u09d4\0\u09f9\0\u0a1e\0\u0a43\0\u0a68\0\u0a8d\0\u0ab2"+
    "\0\u0ad7\0\u0afc\0\u0b21\0\u0b46\0\u0b6b\0\u0b90\0\157\0\157"+
    "\0\u0bb5\0\157\0\u0bda\0\u0bff\0\u0c24\0\u0c49\0\u0c6e\0\u0c93"+
    "\0\u0cb8\0\u0cdd\0\157\0\157\0\u0d02\0\u0d27\0\u0d4c\0\157"+
    "\0\u0d71\0\u0d96\0\u0dbb\0\u0de0\0\u0e05\0\45\0\u0e2a\0\u0e4f"+
    "\0\u0e74\0\u0e99\0\157\0\u0ebe\0\45\0\u0ee3\0\u0f08\0\u0f2d"+
    "\0\45\0\45\0\u0f52\0\157\0\u0f77\0\45\0\45\0\u0f9c"+
    "\0\u0fc1\0\u0fe6\0\u100b\0\u1030\0\u1055\0\u107a\0\157\0\u109f"+
    "\0\u10c4\0\u10e9\0\u110e\0\u1133\0\u1158\0\u117d\0\45\0\45";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[152];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\2\2\5\1\6\1\5\1\7"+
    "\3\5\1\10\1\11\1\5\1\12\1\2\1\5\1\2"+
    "\1\4\1\13\1\14\1\15\1\16\1\17\1\20\1\21"+
    "\1\22\1\23\1\5\1\24\1\25\2\5\2\26\1\27"+
    "\47\0\1\30\1\0\1\31\2\0\1\32\5\0\1\33"+
    "\33\0\14\34\1\0\2\34\7\0\10\34\1\0\1\34"+
    "\5\0\1\34\1\35\12\34\1\0\2\34\7\0\10\34"+
    "\1\0\1\34\5\0\14\34\1\0\2\34\7\0\1\36"+
    "\7\34\1\0\1\34\5\0\7\34\1\37\4\34\1\0"+
    "\2\34\7\0\10\34\1\0\1\34\5\0\13\34\1\40"+
    "\1\0\2\34\7\0\10\34\1\0\1\34\5\0\2\34"+
    "\1\41\11\34\1\0\2\34\7\0\10\34\1\0\1\34"+
    "\1\0\24\42\1\0\20\42\4\0\13\34\1\43\1\0"+
    "\2\34\7\0\10\34\1\0\1\34\5\0\1\34\1\44"+
    "\12\34\1\0\2\34\7\0\6\34\1\45\1\34\1\0"+
    "\1\34\5\0\4\34\1\46\7\34\1\0\2\34\7\0"+
    "\10\34\1\0\1\34\5\0\13\34\1\47\1\0\2\34"+
    "\7\0\10\34\1\0\1\34\5\0\4\34\1\50\7\34"+
    "\1\0\2\34\7\0\10\34\1\0\1\34\43\0\2\26"+
    "\5\0\1\51\2\0\1\52\5\0\1\53\34\0\1\54"+
    "\44\0\1\55\2\0\1\56\44\0\1\57\40\0\14\34"+
    "\1\0\2\34\7\0\1\60\7\34\1\0\1\34\5\0"+
    "\10\34\1\61\3\34\1\0\2\34\7\0\10\34\1\0"+
    "\1\34\5\0\14\34\1\0\2\34\7\0\1\62\7\34"+
    "\1\0\1\34\5\0\12\34\1\63\1\34\1\0\2\34"+
    "\7\0\10\34\1\0\1\34\5\0\13\34\1\64\1\0"+
    "\2\34\7\0\10\34\1\0\1\34\1\0\24\42\1\65"+
    "\20\42\4\0\14\34\1\0\2\34\7\0\2\34\1\66"+
    "\5\34\1\0\1\34\5\0\2\34\1\67\11\34\1\0"+
    "\2\34\7\0\1\70\7\34\1\0\1\34\5\0\1\34"+
    "\1\71\12\34\1\0\2\34\7\0\10\34\1\0\1\34"+
    "\5\0\14\34\1\0\2\34\7\0\3\34\1\72\4\34"+
    "\1\0\1\34\5\0\7\34\1\73\4\34\1\0\2\34"+
    "\7\0\10\34\1\0\1\34\5\0\11\34\1\74\2\34"+
    "\1\0\2\34\7\0\10\34\1\0\1\34\6\0\1\75"+
    "\44\0\1\76\2\0\1\77\44\0\1\100\42\0\1\101"+
    "\44\0\1\102\47\0\1\103\51\0\1\104\32\0\14\34"+
    "\1\0\2\34\7\0\1\34\1\105\6\34\1\0\1\34"+
    "\5\0\5\34\1\106\6\34\1\0\2\34\7\0\10\34"+
    "\1\0\1\34\5\0\10\34\1\107\3\34\1\0\2\34"+
    "\7\0\10\34\1\0\1\34\5\0\1\110\13\34\1\0"+
    "\2\34\7\0\2\34\1\111\5\34\1\0\1\34\5\0"+
    "\14\34\1\0\2\34\7\0\1\112\7\34\1\0\1\34"+
    "\5\0\10\34\1\113\3\34\1\0\2\34\7\0\10\34"+
    "\1\0\1\34\5\0\6\34\1\114\5\34\1\0\2\34"+
    "\7\0\10\34\1\0\1\34\5\0\14\34\1\0\2\34"+
    "\7\0\1\34\1\115\6\34\1\0\1\34\5\0\14\34"+
    "\1\0\2\34\7\0\7\34\1\116\1\0\1\34\5\0"+
    "\1\34\1\117\12\34\1\0\2\34\7\0\10\34\1\0"+
    "\1\34\5\0\1\34\1\120\12\34\1\0\2\34\7\0"+
    "\10\34\1\0\1\34\5\0\10\34\1\121\3\34\1\0"+
    "\2\34\7\0\10\34\1\0\1\34\7\0\1\122\44\0"+
    "\1\123\47\0\1\124\51\0\1\125\35\0\1\126\52\0"+
    "\1\127\41\0\1\130\51\0\1\131\31\0\7\34\1\132"+
    "\4\34\1\0\2\34\7\0\10\34\1\0\1\34\5\0"+
    "\13\34\1\133\1\0\2\34\7\0\10\34\1\0\1\34"+
    "\5\0\7\34\1\134\4\34\1\0\2\34\7\0\10\34"+
    "\1\0\1\34\5\0\7\34\1\135\4\34\1\0\2\34"+
    "\7\0\10\34\1\0\1\34\5\0\4\34\1\136\7\34"+
    "\1\0\2\34\7\0\10\34\1\0\1\34\5\0\12\34"+
    "\1\137\1\34\1\0\2\34\7\0\10\34\1\0\1\34"+
    "\5\0\10\34\1\140\3\34\1\0\2\34\7\0\10\34"+
    "\1\0\1\34\5\0\6\34\1\141\5\34\1\0\2\34"+
    "\7\0\10\34\1\0\1\34\5\0\13\34\1\142\1\0"+
    "\2\34\7\0\10\34\1\0\1\34\10\0\1\143\52\0"+
    "\1\144\41\0\1\145\51\0\1\146\35\0\1\147\41\0"+
    "\1\150\52\0\1\151\51\0\1\152\30\0\13\34\1\153"+
    "\1\0\2\34\7\0\10\34\1\0\1\34\5\0\2\34"+
    "\1\154\11\34\1\0\2\34\7\0\10\34\1\0\1\34"+
    "\5\0\4\34\1\155\7\34\1\0\2\34\7\0\10\34"+
    "\1\0\1\34\5\0\6\34\1\156\5\34\1\0\2\34"+
    "\7\0\10\34\1\0\1\34\5\0\5\34\1\157\6\34"+
    "\1\0\2\34\7\0\10\34\1\0\1\34\5\0\13\34"+
    "\1\160\1\0\2\34\7\0\10\34\1\0\1\34\11\0"+
    "\1\161\41\0\1\162\52\0\1\163\51\0\1\164\35\0"+
    "\1\165\36\0\1\166\55\0\1\167\35\0\1\170\43\0"+
    "\14\34\1\0\2\34\7\0\3\34\1\171\4\34\1\0"+
    "\1\34\5\0\4\34\1\172\7\34\1\0\2\34\7\0"+
    "\10\34\1\0\1\34\5\0\1\34\1\173\12\34\1\0"+
    "\2\34\7\0\10\34\1\0\1\34\12\0\1\174\36\0"+
    "\1\175\55\0\1\176\35\0\1\177\51\0\1\200\35\0"+
    "\1\201\44\0\1\202\45\0\1\203\13\34\1\0\2\34"+
    "\7\0\10\34\1\0\1\34\5\0\7\34\1\204\4\34"+
    "\1\0\2\34\7\0\10\34\1\0\1\34\13\0\1\205"+
    "\35\0\1\206\44\0\1\207\54\0\1\210\35\0\4\34"+
    "\1\211\7\34\1\0\2\34\7\0\10\34\1\0\1\34"+
    "\14\0\1\212\45\0\1\213\34\0\1\34\1\214\12\34"+
    "\1\0\2\34\7\0\10\34\1\0\1\34\15\0\1\215"+
    "\34\0\1\216\44\0\2\34\1\217\11\34\1\0\2\34"+
    "\7\0\10\34\1\0\1\34\5\0\1\220\50\0\1\221"+
    "\44\0\1\222\41\0\1\223\44\0\1\224\45\0\1\225"+
    "\44\0\1\226\41\0\1\227\44\0\1\230\41\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[4514];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\1\1\1\11\7\1\5\11\6\1\1\11"+
    "\4\0\6\1\1\0\6\1\7\0\5\1\1\11\7\1"+
    "\10\0\15\1\10\0\11\1\10\0\6\1\5\0\1\11"+
    "\2\0\3\1\1\0\1\11\3\0\2\11\2\1\1\0"+
    "\2\11\1\0\1\1\2\0\1\1\2\0\1\1\7\0"+
    "\2\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[152];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
    public ArrayList<HashMap<String, String>> errors = new ArrayList<>();

    private Symbol symbol(int type) {
        return new Symbol(type, yyline, yycolumn);
    }

    private Symbol symbol(int type, Object value) {
        return new Symbol(type, yyline, yycolumn);
    }



  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public StructuresScanner(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public StructuresScanner(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 248) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream    
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }

	// numRead < 0
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      for (zzCurrentPosL = zzStartRead; zzCurrentPosL < zzMarkedPosL;
                                                             zzCurrentPosL++) {
        switch (zzBufferL[zzCurrentPosL]) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn++;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 24: 
          { return symbol(sym.END_BG);
          }
        case 33: break;
        case 23: 
          { return symbol(sym.ENEMY);
          }
        case 34: break;
        case 3: 
          { return symbol(sym.SEMICOLON);
          }
        case 35: break;
        case 25: 
          { return symbol(sym.INIT_FIGURE);
          }
        case 36: break;
        case 20: 
          { return symbol(sym.PICTURE);
          }
        case 37: break;
        case 30: 
          { return symbol(sym.DESCRIPTION);
          }
        case 38: break;
        case 16: 
          { return symbol(sym.BONUS);
          }
        case 39: break;
        case 12: 
          { return symbol(sym.WEAPON);
          }
        case 40: break;
        case 17: 
          { return symbol(sym.BOMB);
          }
        case 41: break;
        case 10: 
          { return symbol(sym.ID);
          }
        case 42: break;
        case 1: 
          { System.out.println("Line: " + (yyline + 1) + ", column: " + (yycolumn + 1) + ", Lexical error in: " + yytext());
    HashMap<String, String> error = new HashMap<>();
    error.put("line", Integer.toString(yyline + 1));
    error.put("column", Integer.toString(yycolumn +1));
    error.put("text", yytext());
    error.put("number", Integer.toString(errors.size() + 1));
    errors.add( error );
          }
        case 43: break;
        case 5: 
          { return symbol(sym.EQUAL);
          }
        case 44: break;
        case 21: 
          { return symbol(sym.BLOCK);
          }
        case 45: break;
        case 26: 
          { return symbol(sym.INIT_DESIGN);
          }
        case 46: break;
        case 4: 
          { return symbol(sym.COMMA);
          }
        case 47: break;
        case 6: 
          { return symbol(sym.O_BRACE);
          }
        case 48: break;
        case 28: 
          { return symbol(sym.END_FIGURE);
          }
        case 49: break;
        case 31: 
          { return symbol(sym.INIT_CONF);
          }
        case 50: break;
        case 9: 
          { /* white space */
          }
        case 51: break;
        case 32: 
          { return symbol(sym.END_CONF);
          }
        case 52: break;
        case 13: 
          { return symbol(sym.FINISH);
          }
        case 53: break;
        case 11: 
          { return symbol(sym.STRING);
          }
        case 54: break;
        case 29: 
          { return symbol(sym.END_DESIGN);
          }
        case 55: break;
        case 27: 
          { return symbol(sym.DESTROY);
          }
        case 56: break;
        case 7: 
          { return symbol(sym.C_BRACE);
          }
        case 57: break;
        case 2: 
          { return symbol(sym.PATH);
          }
        case 58: break;
        case 18: 
          { return symbol(sym.HERO);
          }
        case 59: break;
        case 19: 
          { return symbol(sym.NAME);
          }
        case 60: break;
        case 8: 
          { return symbol(sym.INT);
          }
        case 61: break;
        case 15: 
          { return symbol(sym.LIVE);
          }
        case 62: break;
        case 14: 
          { return symbol(sym.TYPE);
          }
        case 63: break;
        case 22: 
          { return symbol(sym.INIT_BG);
          }
        case 64: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
              { return new java_cup.runtime.Symbol(sym.EOF); }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
